const n=JSON.parse('{"key":"v-0db1700e","path":"/posts/%E7%AE%97%E6%B3%95/%E4%BC%98%E5%8C%96%E5%8A%A8%E6%80%81%E5%88%A0%E9%99%A4%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/","title":"优化动态删除集合中的元素","lang":"zh-CN","frontmatter":{"title":"优化动态删除集合中的元素","date":"2022-01-13T17:04:47.000Z","categorie":["算法"],"description":"如何删除一个集合中满足条件的所有元素？ 这是一个很常见的问题，解决方式也五花八门。 常用的思路一般是找出所有集合中所有满足条件的集合存起来，再遍历这个集合删除其中的元素 static void Main(string[] args) { var lst = new List&lt;int&gt;() { 1, 2, 3, 4, 5, 6, 7, 8, 9 }; var tempLst = new List&lt;int&gt;(); foreach (var item in lst) { if (item &gt; 5) tempLst.Add(item); } foreach (var item in tempLst) { lst.Remove(item); } }","head":[["meta",{"property":"og:url","content":"https://alanweekend.github.io/posts/%E7%AE%97%E6%B3%95/%E4%BC%98%E5%8C%96%E5%8A%A8%E6%80%81%E5%88%A0%E9%99%A4%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/"}],["meta",{"property":"og:site_name","content":"Gaming & Coding"}],["meta",{"property":"og:title","content":"优化动态删除集合中的元素"}],["meta",{"property":"og:description","content":"如何删除一个集合中满足条件的所有元素？ 这是一个很常见的问题，解决方式也五花八门。 常用的思路一般是找出所有集合中所有满足条件的集合存起来，再遍历这个集合删除其中的元素 static void Main(string[] args) { var lst = new List&lt;int&gt;() { 1, 2, 3, 4, 5, 6, 7, 8, 9 }; var tempLst = new List&lt;int&gt;(); foreach (var item in lst) { if (item &gt; 5) tempLst.Add(item); } foreach (var item in tempLst) { lst.Remove(item); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-30T07:00:52.000Z"}],["meta",{"property":"article:author","content":"Weekend"}],["meta",{"property":"article:published_time","content":"2022-01-13T17:04:47.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-30T07:00:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"优化动态删除集合中的元素\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-13T17:04:47.000Z\\",\\"dateModified\\":\\"2023-05-30T07:00:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Weekend\\",\\"url\\":\\"https://alanweekend.github.io/\\"}]}"]]},"headers":[{"level":3,"title":"如何删除一个集合中满足条件的所有元素？","slug":"如何删除一个集合中满足条件的所有元素","link":"#如何删除一个集合中满足条件的所有元素","children":[]},{"level":3,"title":"优化,不产生新的GC也不会额外遍历","slug":"优化-不产生新的gc也不会额外遍历","link":"#优化-不产生新的gc也不会额外遍历","children":[]}],"git":{"createdTime":1685430052000,"updatedTime":1685430052000,"contributors":[{"name":"Weekend","email":"872285171@qq.com","commits":1}]},"readingTime":{"minutes":1.85,"words":556},"filePathRelative":"posts/算法/优化动态删除集合中的元素/index.md","localizedDate":"2022年1月13日","excerpt":"<h3> 如何删除一个集合中满足条件的所有元素？</h3>\\n<p>这是一个很常见的问题，解决方式也五花八门。</p>\\n<p>常用的思路一般是找出所有集合中所有满足条件的集合存起来，再遍历这个集合删除其中的元素</p>\\n<div class=\\"language-csharp line-numbers-mode\\" data-ext=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">static</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">Main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> args<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> lst <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">List<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">7</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">8</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">9</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> tempLst <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">List<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">foreach</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> item <span class=\\"token keyword\\">in</span> lst<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>item <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span> tempLst<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">foreach</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> item <span class=\\"token keyword\\">in</span> tempLst<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        lst<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Remove</span><span class=\\"token punctuation\\">(</span>item<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"Weekend","license":"MIT"},"autoDesc":true}');export{n as data};
