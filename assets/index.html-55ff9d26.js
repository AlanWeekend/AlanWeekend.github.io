import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,d as s,e as t,a,b as p}from"./app-779f7ecf.js";const i="/assets/1-f4c8c94c.png",u="/assets/2-fadbd660.png",k={},d=t('<h1 id="框架大体结构" tabindex="-1"><a class="header-anchor" href="#框架大体结构" aria-hidden="true">#</a> 框架大体结构</h1><h2 id="场景结构" tabindex="-1"><a class="header-anchor" href="#场景结构" aria-hidden="true">#</a> 场景结构</h2><figure><img src="'+i+'" alt="场景结构" tabindex="0" loading="lazy"><figcaption>场景结构</figcaption></figure><h2 id="框架uml图" tabindex="-1"><a class="header-anchor" href="#框架uml图" aria-hidden="true">#</a> 框架UML图</h2>',4),r=a("hr",null,null,-1),v=a("h1",{id:"buildtool-打包工具",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#buildtool-打包工具","aria-hidden":"true"},"#"),p(" BuildTool 打包工具")],-1),m=t(`<p>记录文件列表如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Assets/BuildResources/UI/Prefab/TestUI.prefab|ui/prefab/testui.prefab.ab|Assets/BuildResources/UI/Res/3.png|Assets/BuildResources/UI/Res/1.png
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以<code>|</code>符号分割，[0] = 资源名，[1] = Bundle名，后面的都是依赖</p><hr><h1 id="gamestart-框架入口" tabindex="-1"><a class="header-anchor" href="#gamestart-框架入口" aria-hidden="true">#</a> GameStart 框架入口</h1><p>框架入口，挂载到Root节点，读取文件列表，初始化lua等</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameStart</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">GameMode</span> GameMode<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> OpenLog<span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 订阅lua初始化完成事件</span>
        Manager<span class="token punctuation">.</span>Event<span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span>OnLuaInit<span class="token punctuation">)</span><span class="token punctuation">;</span>

        AppConst<span class="token punctuation">.</span>GameMode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>GameMode<span class="token punctuation">;</span>
        AppConst<span class="token punctuation">.</span>OpenLog <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>OpenLog<span class="token punctuation">;</span>
        <span class="token function">DontDestroyOnLoad</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 读取并解析文件列表</span>
        Manager<span class="token punctuation">.</span>Resource<span class="token punctuation">.</span><span class="token function">ParseVersionFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 初始化lua</span>
        Manager<span class="token punctuation">.</span>Lua<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnLuaInit</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Manager<span class="token punctuation">.</span>Lua<span class="token punctuation">.</span><span class="token function">StartLua</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> func <span class="token operator">=</span> Manager<span class="token punctuation">.</span>Lua<span class="token punctuation">.</span>LuaEnv<span class="token punctuation">.</span>Global<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>XLua<span class="token punctuation">.</span>LuaFunction<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        func<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Manager<span class="token punctuation">.</span>Pool<span class="token punctuation">.</span><span class="token function">CreateGameObjectPool</span><span class="token punctuation">(</span><span class="token string">&quot;UI&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Manager<span class="token punctuation">.</span>Pool<span class="token punctuation">.</span><span class="token function">CreateGameObjectPool</span><span class="token punctuation">(</span><span class="token string">&quot;Monster&quot;</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Manager<span class="token punctuation">.</span>Pool<span class="token punctuation">.</span><span class="token function">CreateGameObjectPool</span><span class="token punctuation">(</span><span class="token string">&quot;Effect&quot;</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Manager<span class="token punctuation">.</span>Pool<span class="token punctuation">.</span><span class="token function">CreateAssetPool</span><span class="token punctuation">(</span><span class="token string">&quot;AssetBundle&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="manager类" tabindex="-1"><a class="header-anchor" href="#manager类" aria-hidden="true">#</a> Manager类</h1><p>存储所有模块脚本，持有所有模块，所有模块的入口，挂载到Manager节点</p>`,10),b=t(`<p>在Awake中初始化所有模块</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _resource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ResourceManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _lua <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>LuaManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _ui <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UIManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _entity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>EntityManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _scene <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SceneManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _sound <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SoundManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _event <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>EventManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _pool <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>PoolManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _net <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>NetManager<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="资源加载与卸载流程" tabindex="-1"><a class="header-anchor" href="#资源加载与卸载流程" aria-hidden="true">#</a> 资源加载与卸载流程</h1><h2 id="加载" tabindex="-1"><a class="header-anchor" href="#加载" aria-hidden="true">#</a> 加载</h2>`,5),g=a("h2",{id:"卸载",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#卸载","aria-hidden":"true"},"#"),p(" 卸载")],-1),y=a("hr",null,null,-1),h=a("h1",{id:"resourcemanager资源管理器",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#resourcemanager资源管理器","aria-hidden":"true"},"#"),p(" ResourceManager资源管理器")],-1),w=a("p",null,"解析文件列表，加载ab，并对外提供加载各种类型资源的方法。内部使用引用计数，在外部定时卸载引用计数为0的资源。包括编辑器模式加载和Bundle模式加载两种方式。",-1),f=t(`<h2 id="parseversion-解析版本文件" tabindex="-1"><a class="header-anchor" href="#parseversion-解析版本文件" aria-hidden="true">#</a> ParseVersion 解析版本文件</h2><p>解析版本文件，缓存解析出的ab和依赖</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ParseVersionFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 版本文件路径</span>
    <span class="token class-name"><span class="token keyword">string</span></span> url <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>PathUtil<span class="token punctuation">.</span>BunldeResourcePath<span class="token punctuation">,</span> AppConst<span class="token punctuation">.</span>FileListName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllLines</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 解析Bunlde信息</span>
        <span class="token class-name"><span class="token keyword">var</span></span> bundleInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BundleInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> info <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">&#39;|&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bundleInfo<span class="token punctuation">.</span>AssetsName <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        bundleInfo<span class="token punctuation">.</span>BunldeName <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        bundleInfo<span class="token punctuation">.</span>Dependence <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> info<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            bundleInfo<span class="token punctuation">.</span>Dependence<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>info<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 缓存Bundle信息</span>
        m_BundleInfos<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>bundleInfo<span class="token punctuation">.</span>AssetsName<span class="token punctuation">,</span> bundleInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 缓存lua文件名，用于加载lua脚本</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;LuaScripts&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span> 
            Manager<span class="token punctuation">.</span>Lua<span class="token punctuation">.</span>LuaNames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对外提供的load方法" tabindex="-1"><a class="header-anchor" href="#对外提供的load方法" aria-hidden="true">#</a> 对外提供的Load方法</h2><p>根据加载的资源类型，从不同的目录中加载文件</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LoadUI</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> assetName<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>UObject<span class="token punctuation">&gt;</span></span> onComplate<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LoadAssetAsync</span><span class="token punctuation">(</span>PathUtil<span class="token punctuation">.</span><span class="token function">GetUIPath</span><span class="token punctuation">(</span>assetName<span class="token punctuation">)</span><span class="token punctuation">,</span> onComplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LoadMusic</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> assetName<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>UObject<span class="token punctuation">&gt;</span></span> onComplate<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LoadAssetAsync</span><span class="token punctuation">(</span>PathUtil<span class="token punctuation">.</span><span class="token function">GetMusicPath</span><span class="token punctuation">(</span>assetName<span class="token punctuation">)</span><span class="token punctuation">,</span> onComplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LoadSound</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> assetName<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>UObject<span class="token punctuation">&gt;</span></span> onComplate<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LoadAssetAsync</span><span class="token punctuation">(</span>PathUtil<span class="token punctuation">.</span><span class="token function">GetSoundPath</span><span class="token punctuation">(</span>assetName<span class="token punctuation">)</span><span class="token punctuation">,</span> onComplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LoadEffect</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> assetName<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>UObject<span class="token punctuation">&gt;</span></span> onComplate<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LoadAssetAsync</span><span class="token punctuation">(</span>PathUtil<span class="token punctuation">.</span><span class="token function">GetEffectPath</span><span class="token punctuation">(</span>assetName<span class="token punctuation">)</span><span class="token punctuation">,</span> onComplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LoadScene</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> assetName<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>UObject<span class="token punctuation">&gt;</span></span> onComplate<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LoadAssetAsync</span><span class="token punctuation">(</span>PathUtil<span class="token punctuation">.</span><span class="token function">GetScenePath</span><span class="token punctuation">(</span>assetName<span class="token punctuation">)</span><span class="token punctuation">,</span> onComplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LoadLua</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> assetName<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>UObject<span class="token punctuation">&gt;</span></span> onComplate<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LoadAssetAsync</span><span class="token punctuation">(</span>assetName<span class="token punctuation">,</span> onComplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LoadPrefab</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> assetName<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>UObject<span class="token punctuation">&gt;</span></span> onComplate<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">LoadAssetAsync</span><span class="token punctuation">(</span>assetName<span class="token punctuation">,</span> onComplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loadassetasync-异步加载资源" tabindex="-1"><a class="header-anchor" href="#loadassetasync-异步加载资源" aria-hidden="true">#</a> LoadAssetAsync 异步加载资源</h2><p>根据模式，区分是从Edior中加载还是从Bundle中加载</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LoadAssetAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> assetName<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>UObject<span class="token punctuation">&gt;</span></span> onComplate<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>AppConst<span class="token punctuation">.</span>GameMode <span class="token operator">==</span> GameMode<span class="token punctuation">.</span>EditorMode<span class="token punctuation">)</span>
        <span class="token function">EditorLoadAsset</span><span class="token punctuation">(</span>assetName<span class="token punctuation">,</span> onComplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">LoadBunldeAsync</span><span class="token punctuation">(</span>assetName<span class="token punctuation">,</span> onComplate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="editorloadasset-编辑器模式下加载" tabindex="-1"><a class="header-anchor" href="#editorloadasset-编辑器模式下加载" aria-hidden="true">#</a> EditorLoadAsset 编辑器模式下加载</h2><p>这里用到了<code>AssetDatabase.LoadAssetAtPath</code>API去加载项目中的资源</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EditorLoadAsset</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> assetName<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>UObject<span class="token punctuation">&gt;</span></span> onComplate<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token preprocessor property">#<span class="token directive keyword">if</span> UNITY_EDITOR</span>
    <span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> AssetDatabase<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">LoadAssetAtPath</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UObject<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>assetName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">&quot;asset name is not exist:&quot;</span> <span class="token operator">+</span> assetName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    onComplate<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token preprocessor property">#<span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="getbundle-从已加载的缓存中获取bundle" tabindex="-1"><a class="header-anchor" href="#getbundle-从已加载的缓存中获取bundle" aria-hidden="true">#</a> GetBundle 从已加载的缓存中获取Bundle</h2><p>注意，这里从缓存中获取bundle，如果缓存中有，返回Bundle并且引用计数+1</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token return-type class-name">BundleData</span> <span class="token function">GetBundle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>m_LoadedAssetBundle<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> bundle<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        bundle<span class="token punctuation">.</span>Count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> bundle<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loadbunldeasync-异步加载bundle" tabindex="-1"><a class="header-anchor" href="#loadbunldeasync-异步加载bundle" aria-hidden="true">#</a> LoadBunldeAsync 异步加载Bundle</h2><p><strong>从读取AB文件到实例化至场景中，需要经历一下几个步骤：</strong></p><ol><li>读取AB文件</li><li>加载AB文件中的Bundle资源</li><li>实例化Bundle</li></ol><p><strong>这里分了如下几步去加载Bundle：</strong></p><ol><li>先从缓存中获取，如果缓存中有，加载Bundle，并且引用计数+1</li><li>缓存中没有，从资源池获取。如果资源池有，从资源池中取出Bundle，加载这个Bundle并且引用计数+1</li><li>缓存和资源池中都没有，根据传入的路径读取ab文件，加载这个Bundle，并且缓存起来，同时引用计数也要+1</li></ol><p><strong>这里有几个需要注意的点：</strong></p><blockquote><p>加载Bundle文件时，必须要先加载Bundle的依赖文件。 场景文件不需要加载Bundle。 依赖文件也不需要加载Bundle。</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">LoadBunldeAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> assetName<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>UObject<span class="token punctuation">&gt;</span></span> onComplate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> bunldeName <span class="token operator">=</span> m_BundleInfos<span class="token punctuation">[</span>assetName<span class="token punctuation">]</span><span class="token punctuation">.</span>BunldeName<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> bundlePath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>PathUtil<span class="token punctuation">.</span>BunldeResourcePath<span class="token punctuation">,</span> bunldeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> dependences <span class="token operator">=</span> m_BundleInfos<span class="token punctuation">[</span>assetName<span class="token punctuation">]</span><span class="token punctuation">.</span>Dependence<span class="token punctuation">;</span>

    <span class="token class-name">BundleData</span> bundle <span class="token operator">=</span> <span class="token function">GetBundle</span><span class="token punctuation">(</span>bunldeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bundle <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> Manager<span class="token punctuation">.</span>Pool<span class="token punctuation">.</span><span class="token function">Spawn</span><span class="token punctuation">(</span><span class="token string">&quot;AssetBundle&quot;</span><span class="token punctuation">,</span>bunldeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> ab <span class="token operator">=</span> obj <span class="token keyword">as</span> <span class="token class-name">AssetBundle</span><span class="token punctuation">;</span>
            bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BundleData</span><span class="token punctuation">(</span>ab<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 加载依赖</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>dependences <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> dependences<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> dependence <span class="token keyword">in</span> dependences<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token function">LoadBunldeAsync</span><span class="token punctuation">(</span>dependence<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        
            <span class="token comment">// 加载bundle</span>
            <span class="token class-name">AssetBundleCreateRequest</span> request <span class="token operator">=</span> AssetBundle<span class="token punctuation">.</span><span class="token function">LoadFromFileAsync</span><span class="token punctuation">(</span>bundlePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">yield</span> <span class="token keyword">return</span> request<span class="token punctuation">;</span>
            bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BundleData</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>assetBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_LoadedAssetBundle<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>bunldeName<span class="token punctuation">,</span> bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 场景资源不需要加载ab</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>assetName<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.unity&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        onComplate<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 加载依赖资源不需加载bundle</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>onComplate <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 加载bundle中的资源</span>
    <span class="token class-name">AssetBundleRequest</span> bunldeRequest <span class="token operator">=</span> bundle<span class="token punctuation">.</span>Bundle<span class="token punctuation">.</span><span class="token function">LoadAssetAsync</span><span class="token punctuation">(</span>assetName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token keyword">return</span> bunldeRequest<span class="token punctuation">;</span>

    onComplate<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>bunldeRequest<span class="token punctuation">?.</span>asset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="minusonebundlecount-减去一个资源的引用计数" tabindex="-1"><a class="header-anchor" href="#minusonebundlecount-减去一个资源的引用计数" aria-hidden="true">#</a> MinusOneBundleCount 减去一个资源的引用计数</h2><p>这里分两种情况：</p><ul><li>Bundle的引用计数<code>&gt;1</code>时，只做-1</li><li>Bundle的引用计数<code>&lt;=0</code>时，把Bundle放入资源池，等待资源池的定时释放</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MinusOneBundleCount</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> bundleName<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_LoadedAssetBundle<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>bundleName<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> bundle<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bundle<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            bundle<span class="token punctuation">.</span>Count<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>bundle<span class="token punctuation">.</span>Count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Manager<span class="token punctuation">.</span>Pool<span class="token punctuation">.</span><span class="token function">UnSpawn</span><span class="token punctuation">(</span><span class="token string">&quot;AssetBundle&quot;</span><span class="token punctuation">,</span>bundleName<span class="token punctuation">,</span>bundle<span class="token punctuation">.</span>Bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_LoadedAssetBundle<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>bundleName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="minusbundlecount-减去资源的引用计数" tabindex="-1"><a class="header-anchor" href="#minusbundlecount-减去资源的引用计数" aria-hidden="true">#</a> MinusBundleCount 减去资源的引用计数</h2><p>这里需要对自身的引用数-1的同时，对引用的依赖的引用计数也要-1 这个函数对外提供，在销毁一个对象时，手动调用一下引用计数-1</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MinusBundleCount</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> assetName<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> bundleName <span class="token operator">=</span> m_BundleInfos<span class="token punctuation">[</span>assetName<span class="token punctuation">]</span><span class="token punctuation">.</span>BunldeName<span class="token punctuation">;</span>
    <span class="token function">MinusOneBundleCount</span><span class="token punctuation">(</span>bundleName<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 依赖资源</span>
    <span class="token class-name"><span class="token keyword">var</span></span> dependences <span class="token operator">=</span> m_BundleInfos<span class="token punctuation">[</span>assetName<span class="token punctuation">]</span><span class="token punctuation">.</span>Dependence<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dependences <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> dep <span class="token keyword">in</span> dependences<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> m_BundleInfos<span class="token punctuation">[</span>dep<span class="token punctuation">]</span><span class="token punctuation">.</span>BunldeName<span class="token punctuation">;</span>
            <span class="token function">MinusBundleCount</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unloadbundle卸载bundle资源" tabindex="-1"><a class="header-anchor" href="#unloadbundle卸载bundle资源" aria-hidden="true">#</a> UnloadBundle卸载Bundle资源</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UnloadBundle</span><span class="token punctuation">(</span><span class="token class-name">UObject</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> ab <span class="token operator">=</span> obj <span class="token keyword">as</span> <span class="token class-name">AssetBundle</span><span class="token punctuation">;</span>
    ab<span class="token punctuation">.</span><span class="token function">Unload</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="poolmanager-池管理器" tabindex="-1"><a class="header-anchor" href="#poolmanager-池管理器" aria-hidden="true">#</a> PoolManager 池管理器</h1><p>池管理类，框架对资源池的设计思想是：可以有多个对象池和引用池，开发者可以自行按照类型去分类</p>`,35),L=t(`<h2 id="createpool-创建对象池" tabindex="-1"><a class="header-anchor" href="#createpool-创建对象池" aria-hidden="true">#</a> CreatePool 创建对象池</h2><p>创建一个指定类型的池，所有创建的池都放在<code>Root/Pool/*</code>节点下</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">CreatePool</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> poolName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">float</span></span> releaseTime<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">PoolBase</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_Pools<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>poolName<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> pool<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> go <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GameObject</span><span class="token punctuation">(</span>poolName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        go<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetParent</span><span class="token punctuation">(</span>m_Parnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pool <span class="token operator">=</span> go<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pool<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span>releaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_Pools<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>poolName<span class="token punctuation">,</span>pool<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="creategameobjectpool-创建对象池" tabindex="-1"><a class="header-anchor" href="#creategameobjectpool-创建对象池" aria-hidden="true">#</a> CreateGameObjectPool 创建对象池</h2><p>对外提供的方法，创建一个存储GameObject的池</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateGameObjectPool</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> poolName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">float</span></span> releaseTime<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreatePool</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GameObjectPool<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>poolName<span class="token punctuation">,</span> releaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="createassetpool-创建资源池" tabindex="-1"><a class="header-anchor" href="#createassetpool-创建资源池" aria-hidden="true">#</a> CreateAssetPool 创建资源池</h2><p>对外提供的方法，创建一个存储Bundle资源的池</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateAssetPool</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> poolName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">float</span></span> releaseTime<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreatePool</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AssetPool<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>poolName<span class="token punctuation">,</span> releaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spawn-生成对象" tabindex="-1"><a class="header-anchor" href="#spawn-生成对象" aria-hidden="true">#</a> Spawn 生成对象</h2><p>对外提供的方法</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">Object</span> <span class="token function">Spawn</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> poolName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> assetName<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Pools<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>poolName<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> pool<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> pool<span class="token punctuation">.</span><span class="token function">Spawn</span><span class="token punctuation">(</span>assetName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unspawn-回收对象" tabindex="-1"><a class="header-anchor" href="#unspawn-回收对象" aria-hidden="true">#</a> UnSpawn 回收对象</h2><p>对外提供的方法</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UnSpawn</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> poolName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> assetName<span class="token punctuation">,</span> <span class="token class-name">Object</span> asset<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Pools<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>poolName<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> pool<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        pool<span class="token punctuation">.</span><span class="token function">UnSpawn</span><span class="token punctuation">(</span>assetName<span class="token punctuation">,</span>asset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="poolbase类" tabindex="-1"><a class="header-anchor" href="#poolbase类" aria-hidden="true">#</a> PoolBase类</h2><p>所有池类的父类</p><h3 id="定时释放资源" tabindex="-1"><a class="header-anchor" href="#定时释放资源" aria-hidden="true">#</a> 定时释放资源</h3><p>内部维护一个释放时间间隔，定时释放池内资源</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Ticks <span class="token operator">-</span> m_LastReleaseTime <span class="token operator">&gt;=</span> m_ReleaseTime <span class="token operator">*</span> <span class="token number">10000000</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m_LastReleaseTime <span class="token operator">=</span> System<span class="token punctuation">.</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Ticks<span class="token punctuation">;</span>
        <span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gameobjectpool-类" tabindex="-1"><a class="header-anchor" href="#gameobjectpool-类" aria-hidden="true">#</a> GameObjectPool 类</h2><p>对象池，释放资源时，需要调用引用计数-1</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_Objects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m_Objects<span class="token punctuation">.</span>Count <span class="token operator">&amp;&amp;</span>
                System<span class="token punctuation">.</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Ticks <span class="token operator">-</span> m_Objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>LastUseTime<span class="token punctuation">.</span>Ticks <span class="token operator">&gt;=</span> m_ReleaseTime <span class="token operator">*</span> <span class="token number">10000000</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">Destroy</span><span class="token punctuation">(</span>m_Objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Manager<span class="token punctuation">.</span>Resource<span class="token punctuation">.</span><span class="token function">MinusBundleCount</span><span class="token punctuation">(</span>m_Objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_Objects<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>m_Objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="assetpool类" tabindex="-1"><a class="header-anchor" href="#assetpool类" aria-hidden="true">#</a> AssetPool类</h2><p>资源池，定时卸载不用的Bundle</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>        
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_Objects<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m_Objects<span class="token punctuation">.</span>Count <span class="token operator">&amp;&amp;</span>
                System<span class="token punctuation">.</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Ticks <span class="token operator">-</span> m_Objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>LastUseTime<span class="token punctuation">.</span>Ticks <span class="token operator">&gt;=</span> m_ReleaseTime <span class="token operator">*</span> <span class="token number">10000000</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;卸载ab</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">m_Objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Manager<span class="token punctuation">.</span>Resource<span class="token punctuation">.</span><span class="token function">UnloadBundle</span><span class="token punctuation">(</span>m_Objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
            m_Objects<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>m_Objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="luamanager-lua管理器" tabindex="-1"><a class="header-anchor" href="#luamanager-lua管理器" aria-hidden="true">#</a> LuaManager Lua管理器</h1><p>初始化Lua虚拟机，加载Lua脚本</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid"><pre class="language-mermaid"><code>    <span class="token keyword">classDiagram</span>
        <span class="token keyword">class</span> LuaManager<span class="token punctuation">{</span>
            +List~string~ LuaNames
            +LuaEnv LuaEnv
            -Dictionary~string，byte[]~ m_LuaScript
            +Init<span class="token punctuation">(</span><span class="token punctuation">)</span>
            +StartLua<span class="token text string">(string luaFileName)</span>
            +GetLuaScript<span class="token text string">(string luaFileName)</span>
            -Loader<span class="token text string">(ref string luaFileName)</span>
            -EditorLoadLuaScript<span class="token punctuation">(</span><span class="token punctuation">)</span>
            -LoadLuaScript<span class="token punctuation">(</span><span class="token punctuation">)</span>
            -AddLuaScript<span class="token punctuation">(</span>string assetsName, byte[] luaScript<span class="token punctuation">)</span>
            -Update<span class="token punctuation">(</span><span class="token punctuation">)</span>
            -OnDestroy<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">class</span> LuaBehaviour<span class="token punctuation">{</span>
            -LuaEnv m_LuaEnv
            -Action m_LuaOnInit
            -Action m_LuaUpdate
            -Action m_LuaOnDestroy
            ~LuaTable m_ScriptEnv
            +Init<span class="token text string">(string luaName)</span>
            ~Clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
            -Awake<span class="token punctuation">(</span><span class="token punctuation">)</span>
            -Update<span class="token punctuation">(</span><span class="token punctuation">)</span>
            -OnDestroy<span class="token punctuation">(</span><span class="token punctuation">)</span>
            -OnApplicationQuit<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        LuaManager <span class="token arrow operator">--|&gt;</span> MonoBehaviour <span class="token operator">:</span> 继承
        LuaBehaviour <span class="token arrow operator">--|&gt;</span> MonoBehaviour <span class="token operator">:</span> 继承
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="init-初始化" tabindex="-1"><a class="header-anchor" href="#init-初始化" aria-hidden="true">#</a> Init 初始化</h2><p>对外提供的方法，在<code>GameStart</code>中调用</p><p><strong>这里做以下几件事:</strong></p><ol><li>初始化Lua虚拟机</li><li>添加第三方库</li><li>添加自定义Loader</li><li>加载所有的Lua脚本</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    LuaEnv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LuaEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    LuaEnv<span class="token punctuation">.</span><span class="token function">AddBuildin</span><span class="token punctuation">(</span><span class="token string">&quot;rapidjson&quot;</span><span class="token punctuation">,</span> XLua<span class="token punctuation">.</span>LuaDLL<span class="token punctuation">.</span>Lua<span class="token punctuation">.</span>LoadRapidJson<span class="token punctuation">)</span><span class="token punctuation">;</span>
    LuaEnv<span class="token punctuation">.</span><span class="token function">AddLoader</span><span class="token punctuation">(</span>Loader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_LuaScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>AppConst<span class="token punctuation">.</span>GameMode <span class="token operator">==</span> GameMode<span class="token punctuation">.</span>EditorMode<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">EditorLoadLuaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token function">LoadLuaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="update" tabindex="-1"><a class="header-anchor" href="#update" aria-hidden="true">#</a> Update</h2><p>调用Xlua的Tick函数，进行GC</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    LuaEnv<span class="token punctuation">?.</span><span class="token function">Tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ondestroy" tabindex="-1"><a class="header-anchor" href="#ondestroy" aria-hidden="true">#</a> OnDestroy</h2><p>释放lua虚拟机</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>LuaEnv <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span> 
        LuaEnv<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LuaEnv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="startlua" tabindex="-1"><a class="header-anchor" href="#startlua" aria-hidden="true">#</a> StartLua</h2><p>执行Lua脚本，一般只调用一次，执行lua的main脚本</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StartLua</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> luaFileName<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    LuaEnv<span class="token punctuation">.</span><span class="token function">DoString</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;require &#39;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">luaFileName</span><span class="token punctuation">}</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="editorloadluascript-编辑器模拟下加载所有的lua脚本" tabindex="-1"><a class="header-anchor" href="#editorloadluascript-编辑器模拟下加载所有的lua脚本" aria-hidden="true">#</a> EditorLoadLuaScript 编辑器模拟下加载所有的Lua脚本</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EditorLoadLuaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> luaFiles <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>PathUtil<span class="token punctuation">.</span>LuaPath<span class="token punctuation">,</span> <span class="token string">&quot;*.bytes&quot;</span><span class="token punctuation">,</span> SearchOption<span class="token punctuation">.</span>AllDirectories<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> luaFile <span class="token keyword">in</span> luaFiles<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> fileName <span class="token operator">=</span> PathUtil<span class="token punctuation">.</span><span class="token function">GetStandardPath</span><span class="token punctuation">(</span>luaFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> file <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllBytes</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">AddLuaScript</span><span class="token punctuation">(</span>PathUtil<span class="token punctuation">.</span><span class="token function">GetUnityPath</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Manager<span class="token punctuation">.</span>Event<span class="token punctuation">.</span><span class="token function">Fire</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loadluascript-从bundle中加载所有的lua脚本" tabindex="-1"><a class="header-anchor" href="#loadluascript-从bundle中加载所有的lua脚本" aria-hidden="true">#</a> LoadLuaScript 从Bundle中加载所有的Lua脚本</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LoadLuaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> luaName <span class="token keyword">in</span> LuaNames<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Manager<span class="token punctuation">.</span>Resource<span class="token punctuation">.</span><span class="token function">LoadLua</span><span class="token punctuation">(</span>luaName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">UnityEngine<span class="token punctuation">.</span>Object</span> obj<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token function">AddLuaScript</span><span class="token punctuation">(</span>luaName<span class="token punctuation">,</span> <span class="token punctuation">(</span>obj <span class="token keyword">as</span> <span class="token class-name">TextAsset</span><span class="token punctuation">)</span><span class="token punctuation">?.</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_LuaScript<span class="token punctuation">.</span>Count <span class="token operator">&lt;</span> LuaNames<span class="token punctuation">.</span>Count<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            Manager<span class="token punctuation">.</span>Event<span class="token punctuation">.</span><span class="token function">Fire</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            LuaNames<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            LuaNames <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="addluascript-缓存lua脚本" tabindex="-1"><a class="header-anchor" href="#addluascript-缓存lua脚本" aria-hidden="true">#</a> AddLuaScript 缓存lua脚本</h2><p>主要是避免在Loader中重复读取脚本</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AddLuaScript</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> assetsName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> luaScript<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    m_LuaScript<span class="token punctuation">[</span>assetsName<span class="token punctuation">]</span> <span class="token operator">=</span> luaScript<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="getluascript-自定义loader" tabindex="-1"><a class="header-anchor" href="#getluascript-自定义loader" aria-hidden="true">#</a> GetLuaScript 自定义Loader</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">GetLuaScript</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> luaFileName<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    luaFileName <span class="token operator">=</span> luaFileName<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> fileName <span class="token operator">=</span> PathUtil<span class="token punctuation">.</span><span class="token function">GetLuaScriptPath</span><span class="token punctuation">(</span>luaFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_LuaScript<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> luaScript<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;lua script is not exist:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">fileName</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> luaScript<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="luabehaviour类" tabindex="-1"><a class="header-anchor" href="#luabehaviour类" aria-hidden="true">#</a> LuaBehaviour类</h2><p>绑定lua脚本，提供类似MonoBehaviour的生命周期。 同时也是所有需要在lua中挂载的脚本的父类。</p><h3 id="awake" tabindex="-1"><a class="header-anchor" href="#awake" aria-hidden="true">#</a> Awake</h3><p>为每一个lua脚本创建单独的环境，防止各脚本之前相互影响</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    m_ScriptEnv <span class="token operator">=</span> m_LuaEnv<span class="token punctuation">.</span><span class="token function">NewTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> meta <span class="token operator">=</span> m_LuaEnv<span class="token punctuation">.</span><span class="token function">NewTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    meta<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;__index&quot;</span><span class="token punctuation">,</span> m_LuaEnv<span class="token punctuation">.</span>Global<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_ScriptEnv<span class="token punctuation">.</span><span class="token function">SetMetaTable</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span>
    meta<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_ScriptEnv<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;self&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="init" tabindex="-1"><a class="header-anchor" href="#init" aria-hidden="true">#</a> Init</h3><p>初始化，绑定生命周期的回调</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> luaName<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    m_LuaEnv<span class="token punctuation">.</span><span class="token function">DoString</span><span class="token punctuation">(</span>Manager<span class="token punctuation">.</span>Lua<span class="token punctuation">.</span><span class="token function">GetLuaScript</span><span class="token punctuation">(</span>luaName<span class="token punctuation">)</span><span class="token punctuation">,</span> luaName<span class="token punctuation">,</span> m_ScriptEnv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_ScriptEnv<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;OnInit&quot;</span><span class="token punctuation">,</span><span class="token keyword">out</span> m_LuaOnInit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_ScriptEnv<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;Update&quot;</span><span class="token punctuation">,</span><span class="token keyword">out</span> m_LuaUpdate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_ScriptEnv<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;OnDestroy&quot;</span><span class="token punctuation">,</span><span class="token keyword">out</span> m_LuaOnDestroy<span class="token punctuation">)</span><span class="token punctuation">;</span>       
    m_LuaOnInit<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="update-1" tabindex="-1"><a class="header-anchor" href="#update-1" aria-hidden="true">#</a> Update</h3><p>调用lua中的Update</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    m_LuaUpdate<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ondestroy-1" tabindex="-1"><a class="header-anchor" href="#ondestroy-1" aria-hidden="true">#</a> OnDestroy</h3><p>调用lua中的OnDestroy 清空绑定的回调，释放脚本环境</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    m_LuaOnDestroy<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="onapplicationquit" tabindex="-1"><a class="header-anchor" href="#onapplicationquit" aria-hidden="true">#</a> OnApplicationQuit</h3><p>清空绑定的回调，释放脚本环境</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnApplicationQuit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="clear" tabindex="-1"><a class="header-anchor" href="#clear" aria-hidden="true">#</a> Clear</h3><p>清空绑定的回调，释放脚本环境 <strong>值得注意的是</strong></p><blockquote><p>释放lua虚拟机时，必须要先清空绑定的lua回调</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    m_LuaOnInit <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    m_LuaUpdate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    m_LuaOnDestroy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    m_ScriptEnv<span class="token punctuation">?.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_ScriptEnv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ondestroy-2" tabindex="-1"><a class="header-anchor" href="#ondestroy-2" aria-hidden="true">#</a> OnDestroy</h3><hr><h1 id="uimanager-ui管理器" tabindex="-1"><a class="header-anchor" href="#uimanager-ui管理器" aria-hidden="true">#</a> UIManager UI管理器</h1><p>管理所有的UI，包括：UI分组、打开关闭UI</p>`,78),S=t(`<h2 id="setuigroup" tabindex="-1"><a class="header-anchor" href="#setuigroup" aria-hidden="true">#</a> SetUIGroup</h2><p>所有的UI分组都是动态创建的，UI分组脚本挂载到Root/UI/Group-*上</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetUIGroup</span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">group</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">group</span><span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> go <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GameObject</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Group-</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">group</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">RectTransform</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        go<span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">SetParent</span><span class="token punctuation">(</span>m_UIParent<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> rectTransform <span class="token operator">=</span> go<span class="token punctuation">.</span>transform <span class="token keyword">as</span> <span class="token class-name">RectTransform</span><span class="token punctuation">;</span>
        rectTransform<span class="token punctuation">.</span>anchorMin <span class="token operator">=</span> Vector2<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>
        rectTransform<span class="token punctuation">.</span>anchorMax <span class="token operator">=</span> Vector2<span class="token punctuation">.</span>one<span class="token punctuation">;</span>
        rectTransform<span class="token punctuation">.</span>offsetMin <span class="token operator">=</span> Vector2<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>
        rectTransform<span class="token punctuation">.</span>offsetMax <span class="token operator">=</span> Vector2<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>
        m_UIGroups<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">group</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> go<span class="token punctuation">.</span>transform<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这里有一个需要注意的点</strong></p><blockquote><ol><li>通过new的方式创建GameObejct时，把创建好的对象设置到Canvas下，Transform不会自动转成RectTransform，如果不需要修改RectTransform的属性可以忽略</li><li>new出来的对象放到Canvas下时，坐标会默认在屏幕左下角，需要手动设置。</li></ol></blockquote><figure><img src="`+u+`" alt="通过new的方式创建GameObject" tabindex="0" loading="lazy"><figcaption>通过new的方式创建GameObject</figcaption></figure><h2 id="getuigourp-获取ui分组" tabindex="-1"><a class="header-anchor" href="#getuigourp-获取ui分组" aria-hidden="true">#</a> GetUIGourp 获取UI分组</h2><p>从缓存里获取，没啥好说的</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">Transform</span> <span class="token function">GetUIGourp</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> <span class="token keyword">group</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    m_UIGroups<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span><span class="token keyword">group</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> go<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> go<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="openui-打开ui" tabindex="-1"><a class="header-anchor" href="#openui-打开ui" aria-hidden="true">#</a> OpenUI 打开UI</h2><p>打开UI先从对象池读，对象池没有再去实例化一个，实例化的时候通过Bundle缓存、资源池、AB文件获取，整体流程如下：</p>`,11),A=t(`<h2 id="uilogic类" tabindex="-1"><a class="header-anchor" href="#uilogic类" aria-hidden="true">#</a> UILogic类</h2><p>继承LuaBehaviour 绑定lua脚本，提供类似MonoBehaviour的生命周期，提供打开、关闭的回调。</p><h3 id="init-初始化-1" tabindex="-1"><a class="header-anchor" href="#init-初始化-1" aria-hidden="true">#</a> Init 初始化</h3><p>绑定UI打开和关闭的回调</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> luaName<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span>luaName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_ScriptEnv<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;OnOpen&quot;</span><span class="token punctuation">,</span> <span class="token keyword">out</span> m_LuaOnOpen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_ScriptEnv<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;OnClose&quot;</span><span class="token punctuation">,</span> <span class="token keyword">out</span> m_LuaOnClose<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="onopen" tabindex="-1"><a class="header-anchor" href="#onopen" aria-hidden="true">#</a> OnOpen</h3><p>调用lua中的打开回调</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    m_LuaOnOpen<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="close" tabindex="-1"><a class="header-anchor" href="#close" aria-hidden="true">#</a> Close</h3><p>回收UI到对象池，调用lua中的关闭回调。 隐藏UI在对象池的回收方法中</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    m_LuaOnClose<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Manager<span class="token punctuation">.</span>Pool<span class="token punctuation">.</span><span class="token function">UnSpawn</span><span class="token punctuation">(</span><span class="token string">&quot;UI&quot;</span><span class="token punctuation">,</span> AssetName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>UI关闭到释放资源的流程</strong></p>`,12),x=t(`<h3 id="clear-1" tabindex="-1"><a class="header-anchor" href="#clear-1" aria-hidden="true">#</a> Clear</h3><p>清空绑定的打开和关闭的lua回调</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    m_LuaOnOpen <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    m_LuaOnClose <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="entitymanager-实体管理器" tabindex="-1"><a class="header-anchor" href="#entitymanager-实体管理器" aria-hidden="true">#</a> EntityManager 实体管理器</h1><p>管理所有的实体，包括：实体分组、显示隐藏实体。 与UI管理器不能说毫不相关，只能说一摸一样，详细的可以参考UI管理器及UILogic</p>`,5),M=a("hr",null,null,-1),C=a("h1",{id:"scenemanager-场景管理器",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#scenemanager-场景管理器","aria-hidden":"true"},"#"),p(" SceneManager 场景管理器")],-1),O=a("p",null,"管理场景的加载、切换、激活",-1),N=t(`<h2 id="loadscene-叠加加载场景" tabindex="-1"><a class="header-anchor" href="#loadscene-叠加加载场景" aria-hidden="true">#</a> LoadScene 叠加加载场景</h2><p>叠加场景模式加载</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LoadScene</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> luaName<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Manager<span class="token punctuation">.</span>Resource<span class="token punctuation">.</span><span class="token function">LoadScene</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">,</span> obj <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">StartLoadScene</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">,</span> luaName<span class="token punctuation">,</span> LoadSceneMode<span class="token punctuation">.</span>Additive<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>叠加加载场景和加载单个场景的区别</strong></p><blockquote><p>叠加场景加载完场景后不销毁原场景 加载单个场景，销毁原场景</p></blockquote><h2 id="changescene-切换场景" tabindex="-1"><a class="header-anchor" href="#changescene-切换场景" aria-hidden="true">#</a> ChangeScene 切换场景</h2><p>单场景模式加载</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ChangeScene</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> luaName<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Manager<span class="token punctuation">.</span>Resource<span class="token punctuation">.</span><span class="token function">LoadScene</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">,</span> obj <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">StartLoadScene</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">,</span> luaName<span class="token punctuation">,</span> LoadSceneMode<span class="token punctuation">.</span>Single<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="activescene-激活场景" tabindex="-1"><a class="header-anchor" href="#activescene-激活场景" aria-hidden="true">#</a> ActiveScene 激活场景</h2><p><strong>激活场景</strong></p><blockquote><p>活动场景是将用作新游戏对象（由脚本实例化）的目标的场景，在这些场景中会使用光照设置。以累加方式添加场景时（请参阅 LoadSceneMode.Additive），第一个场景将仍然保持为活动场景。使用此方法可将活动场景切换为您想作为目标的场景。</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ActiveScene</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> scenName<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> lastScene <span class="token operator">=</span> UnityEngine<span class="token punctuation">.</span>SceneManagement<span class="token punctuation">.</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetActiveScene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> lastLogic <span class="token operator">=</span> <span class="token function">GetSceneLogic</span><span class="token punctuation">(</span>lastScene<span class="token punctuation">)</span><span class="token punctuation">;</span>
    lastLogic<span class="token punctuation">?.</span><span class="token function">OnUnActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> scene <span class="token operator">=</span> UnityEngine<span class="token punctuation">.</span>SceneManagement<span class="token punctuation">.</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetSceneByName</span><span class="token punctuation">(</span>scenName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    UnityEngine<span class="token punctuation">.</span>SceneManagement<span class="token punctuation">.</span>SceneManager<span class="token punctuation">.</span><span class="token function">SetActiveScene</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> logic <span class="token operator">=</span> <span class="token function">GetSceneLogic</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>
    logic<span class="token punctuation">?.</span><span class="token function">OnActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unloadscene-卸载场景" tabindex="-1"><a class="header-anchor" href="#unloadscene-卸载场景" aria-hidden="true">#</a> UnloadScene 卸载场景</h2><p>对外提供的卸载场景的方法</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UnloadScene</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">UnLoadScene</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="startloadscene-加载场景的实现" tabindex="-1"><a class="header-anchor" href="#startloadscene-加载场景的实现" aria-hidden="true">#</a> StartLoadScene 加载场景的实现</h2><p>每个场景中都有一个挂载<code>SceneLogic</code>脚本的对象继承自<code>LuaBehaviour</code>向lua提供场景的生命周期。 通过<code>MoveGameObjectToScene</code>API将挂载<code>SceneLogic</code>脚本的对象移动到新场景中去</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">StartLoadScene</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> luaName<span class="token punctuation">,</span> <span class="token class-name">LoadSceneMode</span> mode<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsLoadedScene</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">async</span> <span class="token operator">=</span> UnityEngine<span class="token punctuation">.</span>SceneManagement<span class="token punctuation">.</span>SceneManager<span class="token punctuation">.</span><span class="token function">LoadSceneAsync</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">async</span><span class="token punctuation">.</span>allowSceneActivation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">async</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> scene <span class="token operator">=</span> UnityEngine<span class="token punctuation">.</span>SceneManagement<span class="token punctuation">.</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetSceneByName</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> go <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GameObject</span><span class="token punctuation">(</span>m_LogicName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    UnityEngine<span class="token punctuation">.</span>SceneManagement<span class="token punctuation">.</span>SceneManager<span class="token punctuation">.</span><span class="token function">MoveGameObjectToScene</span><span class="token punctuation">(</span>go<span class="token punctuation">,</span> scene<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> logic <span class="token operator">=</span> go<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SceneLogic<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logic<span class="token punctuation">.</span>SceneName <span class="token operator">=</span> sceneName<span class="token punctuation">;</span>
    logic<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span>luaName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    logic<span class="token punctuation">.</span><span class="token function">OnEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unloadscene-卸载场景的实现" tabindex="-1"><a class="header-anchor" href="#unloadscene-卸载场景的实现" aria-hidden="true">#</a> UnLoadScene 卸载场景的实现</h2><p>异步卸载场景，调用lua的场景退出回调</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">UnLoadScene</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sceneName<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> scene <span class="token operator">=</span> UnityEngine<span class="token punctuation">.</span>SceneManagement<span class="token punctuation">.</span>SceneManager<span class="token punctuation">.</span><span class="token function">GetSceneByName</span><span class="token punctuation">(</span>sceneName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scene<span class="token punctuation">.</span>isLoaded<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">&quot;Scene not isLoaded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">yield</span> <span class="token keyword">break</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>

    <span class="token class-name"><span class="token keyword">var</span></span> logic <span class="token operator">=</span> <span class="token function">GetSceneLogic</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>
    logic<span class="token punctuation">?.</span><span class="token function">OnQuit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">async</span> <span class="token operator">=</span> UnityEngine<span class="token punctuation">.</span>SceneManagement<span class="token punctuation">.</span>SceneManager<span class="token punctuation">.</span><span class="token function">UnloadSceneAsync</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">async</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="scenelogic类" tabindex="-1"><a class="header-anchor" href="#scenelogic类" aria-hidden="true">#</a> SceneLogic类</h3><p>继承LuaBehaviour给lua提供场景的生命周期</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SceneLogic</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">LuaBehaviour</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> SceneName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Action</span> m_LuaOnActive<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Action</span> m_LuaOnUnActive<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Action</span> m_LuaOnEnter<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Action</span> m_LuaOnQuit<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> luaName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span>luaName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_ScriptEnv<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;OnActive&quot;</span><span class="token punctuation">,</span> <span class="token keyword">out</span> m_LuaOnActive<span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_ScriptEnv<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;OnUnActive&quot;</span><span class="token punctuation">,</span> <span class="token keyword">out</span> m_LuaOnUnActive<span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_ScriptEnv<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;OnEnter&quot;</span><span class="token punctuation">,</span> <span class="token keyword">out</span> m_LuaOnEnter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_ScriptEnv<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;OnQuit&quot;</span><span class="token punctuation">,</span> <span class="token keyword">out</span> m_LuaOnQuit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m_LuaOnActive<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnUnActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m_LuaOnUnActive<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m_LuaOnEnter<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnQuit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m_LuaOnQuit<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m_LuaOnActive <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        m_LuaOnUnActive <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        m_LuaOnEnter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        m_LuaOnQuit <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="soundmanager-声音管理器" tabindex="-1"><a class="header-anchor" href="#soundmanager-声音管理器" aria-hidden="true">#</a> SoundManager 声音管理器</h1><p>声音分为两种类型，一种是BGM音乐一直循环播放的，一种是音效，只播放一次。 这里的实现是使用两个AudioSource分别播放BGM和音效</p>`,27),B=t(`<p>这个就比较简单了，没啥好说的直接上代码吧</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SoundManager</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">AudioSource</span> m_MusicAudio<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">AudioSource</span> m_SoundAudio<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> SoundVolume
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> PlayerPrefs<span class="token punctuation">.</span><span class="token function">GetFloat</span><span class="token punctuation">(</span><span class="token string">&quot;SoundVolume&quot;</span><span class="token punctuation">,</span> <span class="token number">1.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">set</span>
        <span class="token punctuation">{</span>
            m_SoundAudio<span class="token punctuation">.</span>volume <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
            PlayerPrefs<span class="token punctuation">.</span><span class="token function">SetFloat</span><span class="token punctuation">(</span><span class="token string">&quot;SoundVolume&quot;</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> MusicVolume
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> PlayerPrefs<span class="token punctuation">.</span><span class="token function">GetFloat</span><span class="token punctuation">(</span><span class="token string">&quot;MusicVolume&quot;</span><span class="token punctuation">,</span> <span class="token number">1.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">set</span>
        <span class="token punctuation">{</span>
            m_MusicAudio<span class="token punctuation">.</span>volume <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
            PlayerPrefs<span class="token punctuation">.</span><span class="token function">SetFloat</span><span class="token punctuation">(</span><span class="token string">&quot;MusicVolume&quot;</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m_MusicAudio <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AudioSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_MusicAudio<span class="token punctuation">.</span>playOnAwake <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        m_MusicAudio<span class="token punctuation">.</span>loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        m_SoundAudio <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AudioSource<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_SoundAudio<span class="token punctuation">.</span>loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 播放音乐</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PlayMusic</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>MusicVolume <span class="token operator">&lt;</span> <span class="token number">0.1f</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">string</span></span> oldName <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_MusicAudio<span class="token punctuation">.</span>clip <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> oldName <span class="token operator">=</span> m_MusicAudio<span class="token punctuation">.</span>clip<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldName <span class="token operator">==</span> Path<span class="token punctuation">.</span><span class="token function">GetFileNameWithoutExtension</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m_MusicAudio<span class="token punctuation">.</span><span class="token function">Play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        Manager<span class="token punctuation">.</span>Resource<span class="token punctuation">.</span><span class="token function">LoadMusic</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> obj <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            m_MusicAudio<span class="token punctuation">.</span>clip <span class="token operator">=</span> obj <span class="token keyword">as</span> <span class="token class-name">AudioClip</span><span class="token punctuation">;</span>
            m_MusicAudio<span class="token punctuation">.</span><span class="token function">Play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 暂停音乐</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PauseMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m_MusicAudio<span class="token punctuation">.</span><span class="token function">Pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 取消暂停音乐</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UnPauseMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m_MusicAudio<span class="token punctuation">.</span><span class="token function">UnPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 停止播放音乐</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StopMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        m_MusicAudio<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 播放声音</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PlaySound</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>SoundVolume <span class="token operator">&lt;</span> <span class="token number">0.1f</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        
        Manager<span class="token punctuation">.</span>Resource<span class="token punctuation">.</span><span class="token function">LoadSound</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> obj <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            m_SoundAudio<span class="token punctuation">.</span><span class="token function">PlayOneShot</span><span class="token punctuation">(</span>obj <span class="token keyword">as</span> <span class="token class-name">AudioClip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 设置音乐音量</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetMusicVolume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>MusicVolume <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 设置音效音量</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetSoundVolume</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>SoundVolume <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="eventmanager-事件管理器" tabindex="-1"><a class="header-anchor" href="#eventmanager-事件管理器" aria-hidden="true">#</a> EventManager 事件管理器</h1><p>其实就是发布订阅模式</p>`,4),U=t(`<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventManager</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EventHandler</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> EventHandler<span class="token punctuation">&gt;</span></span> m_Events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> EventHandler<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Subscribe</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span> <span class="token class-name">EventHandler</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Events<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            m_Events<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">+=</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            m_Events<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UnSubscribe</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span> <span class="token class-name">EventHandler</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Events<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Events<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                m_Events<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">-=</span> e<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                m_Events<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Fire</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> args <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_Events<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> handler<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="netmanager-网络管理器" tabindex="-1"><a class="header-anchor" href="#netmanager-网络管理器" aria-hidden="true">#</a> NetManager 网络管理器</h1>`,2);function q(_,I){const n=o("Mermaid");return c(),l("div",null,[d,s(n,{id:"mermaid-12",code:"eJyVk91KAkEcxe97in2BXkBEyJIQMiLzAQYdVFh3Yj+kqKALFZaCDJMwzBKRjMCSSEGTXsaZrbdohdod151xdq+WmXN+Ozvn/CX7SctA07byIKuCwtp8wVmUtkEBJnWg6ifOxvwJh0m7QlpDXO7iq04k4myeefwJoIAsVJfc5jlpmqTXxve31l0Jf9atm95K2D7UkKGmIQP6/VEi46rVb1vVCm70OKAdAzAY9o4IIBVn+FNxEXtM0fP6MQOB+63ZtOaL+X/x4JJpqLAuBTfHpPEaiIYMJcOidd5+Ht6D0GJFqOgM2mx8MZsMg9D2EJJZlRo8BiHtQtaprOm1NWmKxBg18nLmwD6SF7GhaVCP2tcoQ2LW8GUZj7q4POIVSrELETvyqeMmkOVkDqiHxHzGg7ovw5lSaX0dSQmkoCjMgWLenhYpJFmTJ2J+OeK/37alp5FVWs/ECXnc4RKSO6MkpF6YHCEHPRxiBqr/YmeiKi5koFospHe7KiR3tWgpwJA0b2P1xVdMJcfVuZFxZYtZcaULIfGVdDr8z9OxcJV0HlwhFYSj+wUPKGMH"}),r,v,s(n,{id:"mermaid-17",code:"eJxTAILknMTiYpfMxPSixFwukABcUMGpNDMnJSQ/P6caLgECNjaOxcWpJU6leSk5qc86Jz/taX26fenT1u12dijqdMH6wzPzUvLLiyGqNTQVVLCoccxLKcrPTIGpwabE0z8YnzSmwe6pJS6pBal5Kal5yakaxSVFmXnpCsmlRW6ZOamaKgo+mcUldRDROrjGWi4A4KBNtA=="}),m,s(n,{id:"mermaid-40",code:"eJxTAILknMTiYpfMxPSixFwukABcUME3MS8xPbWoGi4MAjY2zzobns3pfLZi4dO505/Panm6Z+rzKSueti592r/Yzg5FrXZQanF+aVFyKtQkBRhfBVWZT2kiTAWQiSYZ6gmTC/VEk3LNK8ksqYRJQ3hoSoKTU/Pg1oM56AryS/NS4ApAHHRLylLzSuB2gDhoCgLy83Ng8iA2mrRfKlw3kIkqqetYnpidqqEJF6yFs2B6dHVr7BR88/PynVIzEssygcGnYKXwfPfyZ537uQDJqYCi"}),b,s(n,{id:"mermaid-52",code:"eJxLy8kvT85ILCpRCHHiUgCCF1tbnu2a8HRCr4Kurp1CZoph9ZPdfU6leSk5qc/3TH66dsaLvu1P+6fVghUDpXV1FZ7N6QQpRlYElkUWACp7sX/K09nzECqRTZi+ACSemWIEsg3ihGcbF6BaZYSwCq4CyclAHlABUP3T9l1YnQM1AWLVi/W7gUodnZ5Na3+yexvEGBQhsPdRzAAAcaiHlA=="}),g,s(n,{id:"mermaid-56",code:"eJxLy8kvT85ILCpRCHHiUgCCl1Manq1vfLp+54uNCxV0dRWe7pn6fMqKF+sWPpu6QdcQKGKn4FSal5KT+nzP5KdrZ4D1IAugabGxNQDpebG15dmuCc82LgCrh/NAijs2PJu+7eX0LWCjn/bueLF3L8Q8LgAC900k"}),y,h,w,s(n,{id:"mermaid-64",code:"eJylVcFu00AQvfMVe0xV8gMoREqbgCIltAKFK1rbk7DF3q1216AKiIjUCwjUSlBAlSqRC/QC9NILpORjaBzf+gvd9Tpx7FhVK/tk77x5M0+z84zUY7tYiDrBPY69W/pgfogegmA+t6GNKe4BfzkP66dSCU93gz/7k3ffwrOz4Hg4OfpSraYg5TqxJWEU852+kJzQ3sXo/ZpPHReatMv6yHuSfInrptaxxDq1xbADTk0IkCaQIljdxFzAY+BCsdwjLpRW0vE2ob4wievMp7JkyiAlHOQD7EEG36GuKmgSSp0NawtsiZi1lYHprjrNJbLbqBbpqcSZVcToOvO2XSyzhTRD2xfELkrySMlyipI0ul0FKtyKDRSKkrR8XJRik0MXWwVYyppFXQLXgZrYoTebEbqLqO+6K6jZoL4HHEvGl9mjG31z8kyf92dbMSOh+kqjZIXS8GgbNijkLIQVHS1vRLnhECVg3nKRbmsv8LPFDX2dcaLEJrImFOztheOT8PvA+ND0cDeazvl4GAx+X4wOY5Pa//D/zcCwmPfzf0fh6eeMYa3GEiI9QmvIDZv5L4dbRMjYrfqoDttAHaB2AspXpYeRr2o6+jj5+XUmCeaaTJ4SMRkdTD8dh7+GwcFJVsqCMcaF0nFCJYrmnD5OeiotMmArbziZHwQql19VUZtRtgZP8XOiYugOmv79EbwdX5HDFsar8GYy18DrJhP8JT64P5Y="}),f,s(n,{id:"mermaid-189",code:"eJzFVMtOAjEU3fsVXUIAP8AQEpDEmIAShTUpWHBwpiVtlRCFlTGauGBl4sJEVrrSsMBEMfoz8tj5C7bpMNAyKLjQbubm9j7OPfd0gDhFGzKWtGCZQmdFOjwnyBBipyGGZUSPvSt5otFB53b40B62zvrX97GYdhnJUohZiVAHOPkMpJjr10mryC2CIa03GacWLn++XspOCchQU6YIm2kpoXWKIEcb0EHbhQoqchkSUMmgKuwtcRMGJZtADiiykaiUtRwU9KsSZwz9ssBuFdbwbJrrEIwhLj1BoFDqyTm8YHrYTVceHUIkXoMHKGA41WBypmg2ttRYDZ+Nq+76wkMuJL/B3H6yl0FXnXHkrCYFNtkVpCDjOYVAD5x0HYPH0zyoz/egpXj8NHr+NOz0DIE2FSFOfmdCiR5gE4HByUvAc2NSFuPNCXKpXGUZ2t3EFg+ojvwHScmpFxKPRg8pVIyiLmZTJr7ayVX3xH6mvI2xYbCsvz6T6/7j86jTFowbXP/VgPNQe6/dBDzqng5eWv8I2LOm/rIgEjmJgTTBJIH24ZFFDilYA8Pe3eDiXYuXcl82eOpxi7iPt5tR92pCl75eVdtLninr0Tov8Av/vN1G"}),L,s(n,{id:"mermaid-395",code:"eJx9kk9Kw0AUxvc9xVtGai5QpBBbKIHUCpq1PMIYB5OZMH8UUbNzIXThLVx4BAVPU116BTOTdJppS2c33/u9ed/7GGhOVqCUU4q5wHJgBCdCGs+RYU7EoyuYE05ppihnKB5qqQRl+d/X8lIgk9dclDWUV2k8E1xX0m9ziCXOURCmPGJ4QVTXGiRUqpP29THkRjry2ZlluRZV0GIdBW6Mzy8qwtJ4zWp6hiU5hn6ruxUaTdUfGEb3eEuCjfi8k1bCc5ptZRXZqJqNE40LZkwcqk8KLonvu/MUSUmUceVXY0bVeqe9toft0J5vq9pBW2I9KQiKvRu6nwBh+DSGOWf8lNzgHW3yhxH8fr7/vH73aJtEyzZ7HUQ3D3PXOILV8mX19jH4Bwh0wAg="}),S,s(n,{id:"mermaid-436",code:"eJxLy8kvT85ILCpRCHHiUgCCUM+nE3p1nna0Pd/dAmTp6io82bPgaetSBV1du2edk5/uaQj1tAarhPFAMgqZKYbVT3b3PV2/88XGhc82LnjRt/1p/7RaiEqgJNCcZ3M6QUpfrNv3fO86iAU6qCZC1U1fAFL3tGvBi717YVIwHtQyI5BlTqV5KTmpz/dMfrp2Bpp9Rgj7nq6b92Rf99OeaaGeOs93T3y6blaop09+embyi5ZZz+asgRqPXxHYVrwOB1sIcXhmijHIdS+2tjzbNQEzKIwRTkNWBVTytH0XRBGmONgBkDCA+BrFNIi9QF2OTs+mtT/Zve3JjrUv1u8GaoWbhyGDw0RkEYgSQsEHAFPcGCw="}),A,s(n,{id:"mermaid-467",code:"eJxLy8kvT85ILCpRCHHiUgCCp62bX05fG+qpq6vwdPa8Z1O2Kejq2j1dv/PFxoXPNi6whqiBcUGKOjY8m77t5fQtzzYtfNo/7Wn7rid79z+fsgKk7eWUhmfrGyGqITqRRUAqFF5sbXm2a8LTPVOBWl6sW/hs6gZdQ4hSbDIg+5AEbGwNkA0BOxfoHggX6DxkczAkkd2ObOiL/TOezVgPNBrooWdzOtH9pPC0d8eLvXshxnABAFtguAw="}),x,s(n,{id:"mermaid-481",code:"eJyFUkFOwzAQvPcVewwq+UCFKgWKClIKSHBHq2DSFYld2Q5VBeTGAakHfsGBJ4DEawpHvkBcp24cRdS3zM5kZseG6iQZKjUiTCXmPQM4EI65Jr2YIMeUyQc3NCccUaJJcJSLUmlJPP39XF5J5OpWyLyE/NqKx1IUM+VLHc2xLlAyrj1W/5Lpxi+CmJQ+sE5DSA205/PHji8KOQsstWaCs2x5TMXcijb8gs4wZ/vQlLuvrEAz9Y3DaI53LNiCT50txiKlpNVhtK6waiEu8JybMP/NT+iG+fHrWJFSTJtg/vSUk96s1Zm8bz0b0WvUOLXQ8ihjKDu39F4JhOHjECaCi0M2xXuq7gIG8PPx9v3y1VKsG7H8ar+d9K2Bpx/Aavm8en3v/QHAr9Qg"}),M,C,O,s(n,{id:"mermaid-489",code:"eJydU0tOwzAQ3fcUXiaiuUAXSFAqFKkBoSprNKSj1FIylhynGz47FkgsuAULjsCC0xSuQex8GudTKryI4uf3xm8+ZsWKEsiyCw6xhHSigQZkqwgJAyCIUd43Z3p5mZKcYpbeLkXMoytI0To/WQpYG7lTMTO90bwpq5AkB713beF8AxTjv6RnkeLbvnSAGVIy6s+meisFUh2fzZQ13ECskaXFx2X+gvIUJSgh7eghjYc+ILtEZTSm+I75LXVu2TOD2xI/0zfh6F13QiSN4nFoEEzQzhjokgvSY5DDNZUNOMQIj+AsSGEnX5twk3Nl97NKx9jsz6JPXNUZD09Obd3p4bXh/omx2Ye1uQ76NE8Q2tR9edsvjHnewykLBIlz3MCWi1yyGfv5fP9++bIFphMlvSjIX+x9+LZ6xnavz7u3j8kvxMIp0Q=="}),N,s(n,{id:"mermaid-559",code:"eJxTAILknMTiYpfMxPSixFwukABcUCE4vzQvxTcxLzE9tagaLgcCuo6lKZn5QPmi5FSF3Hjf0uLMZLAQPlVg47CoSsvJTyxRAJsRlp9TmpuKTRqsGYu0dkBOYiVYr0ZxSVFmXrpCXmJuqiaamsTS4lSIIjSZ0DzccsEl+QVYJUBWgt2DoSO1BMkbWGSRfIEmq+tYnpiNLFgLZyFHg4Kubo2dgm9+Xr5TakZiWSYwbBWsFJ7vXv6scz8XAL4efN4="}),B,s(n,{id:"mermaid-570",code:"eJyVkEEKwkAMRfeeIktFewFBF6LixpW4lrQTamSagZlpQdTuBe/hIRS8jS69gq1Ka5f+VfLzfgKBQpFG58aMscWkVRqVCZOMxM9RMCa7q2aluoo0xegJMsPqA85QlCbb4IIxR56NoN3mLP55Pf2iOSSrd++ayxdp6CLLIbWLDLDqNQ4AdZr4Uv4MTNnWpAk3FHlAGzsYgKRa1/ShqhYmFfV9BQTBfghzI2ZEa8zYpBb68Lic78db6wVp8Gbl"}),U,s(n,{id:"mermaid-575",code:"eJyNVEtOAkEQ3XuKWmJkLmCUREATIogCujHElDPF0JGpJt09kPHD3pN4CBfeRq9hDzMMNB+lV9VV79WnX6UBwB+h1nWBocLowN7TM/fBFZkWMoakXhaB9HjWXxsJYgPRQ2E7iJuYYppdUnKHo5iuUagTwaYM2ijBYWVmiS3S2qaeIx1uM8aLmH0jJEOHfBITyrGrsKMGC1M6dFxd4iCHlmw5iDK7ESwKLzwurc01yUy+oaAnu6QmpEo5fii1KaepxlKZdVY6+oK41kmb60LvCuZDZS3q8J/2vNtxgIaWOd42RMoEcDXq+eNCoy0CWdZUqqeuUYSRhVh4ZjsoX7I2kPZZjQcDUl3x7Gr1mBi671t+FodTYJrC3Ltk9B1KiyKpkqKwvW4pXBWMKukQBjapzb5ydZ6yGH7j/fPH3yLnfJ5NPTeWxypT/1uZokqpcaYT9juk45EBXNrr+HSEvcG7V8jLV6iOBtcibT7nIJ1lzzIdilCwHbFqRdNN4tAMt+za8isAz3utQEuyrNIQJ0LGCo7h5/Pj+/3r4Be+V0GO"})])}const G=e(k,[["render",q],["__file","index.html.vue"]]);export{G as default};
